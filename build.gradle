import org.apache.tools.ant.filters.ReplaceTokens
import org.jetbrains.grammarkit.tasks.*
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.intellij' version '1.10.1'
    id 'org.jetbrains.kotlin.jvm' version '1.6.21'
//    id 'net.saliman.cobertura' version '4.0.0'
//    id 'com.github.kt3k.coveralls' version '2.10.2'
    id 'org.jetbrains.grammarkit' version '2021.2.2'
}


sourceSets {
    main {
        java.srcDirs 'src/main/java', 'src/main/kotlin', 'gen' , 'src/main/jflex'
        // resources.srcDirs 'src/main/resources' // specifying the default causes a problem with processResources on Gradle 7
    }
    test {
        java.srcDirs 'src/test/java', 'src/test/kotlin'
    }
}

version = "${version}"

apply plugin: 'kotlin'

//apply plugin: 'cobertura'

apply plugin: 'org.jetbrains.grammarkit'

// cobertura.coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
// cobertura.coverageSourceDirs = [sourceSets.main.java.srcDirs, sourceSets.main.kotlin.srcDirs, 'gen']
// cobertura.coverageEncoding = 'UTF-8'
// cobertura.coverageExcludes = [ '.*uk.co.cwspencer.*' ]



allprojects {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:deprecation"
    }

    tasks.withType(Test) {
        // workaround for test cases not found https://youtrack.jetbrains.com/issue/IDEA-278926
        scanForTestClasses false
        include '**/**/*Test.class'

        jvmArgs = [
            '--illegal-access=warn',
            '--add-opens=java.base/java.lang=ALL-UNNAMED',
            '--add-opens=java.base/java.io=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.awt=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt.event=ALL-UNNAMED',
            '--add-opens=java.desktop/javax.swing=ALL-UNNAMED'
        ]

        testLogging {
            beforeSuite { suite ->
                if (!suite.parent) { // will match the outermost suite
                    logger.lifecycle ' ----------- Building Tests -----------'
                } else if (suite.className != null) {
                    logger.lifecycle "${suite.className}:"
                }
            }

            afterTest { descriptor, result ->
                switch (result.resultType) {
                    case 'SUCCESS':
                    case 'PASSED':
                        logger.info(" {} {}", Os.isFamily(Os.FAMILY_WINDOWS)? "√":"✔", descriptor.name)
                        break
                    case TestResult.ResultType.SKIPPED.name():
                        logger.warn(" {} {}", Os.isFamily(Os.FAMILY_WINDOWS)? "!":"⛔", descriptor.name)
                        break
                    case TestResult.ResultType.FAILURE.name():
                        logger.error(" {} {}", Os.isFamily(Os.FAMILY_WINDOWS)? "×":"✘", descriptor.name)
                        break
                    default:
                        logger.lifecycle(" ? {} {}", descriptor.name, result.resultType)
                }
            }

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength) + '\n')
                }
            }
        }
    }

    // take the version number defined in gradle build and use that in plugin.xml
    task initConfig(type: Copy) {
        from('src/main/resources') {
            include '**/plugin.xml'
            filter(ReplaceTokens, tokens: [version: version])
        }
    }

    task testCompilation(type: Test, group: 'Verification', dependsOn: [classes, testClasses]) {
        useJUnit {
            include 'io/github/intellij/dlanguage/build/**'
        }
        testLogging {
            exceptionFormat = 'full'
        }
    }


}

apply plugin: 'org.jetbrains.intellij'
intellij {
    pluginName = 'intellij-dlanguage'
    version = ideaVersion
    //type = 'CL' // maybe helpful to change this when trying other IDE. can be 'IC', 'IU', 'JPS', or 'CL'
    updateSinceUntilBuild = false
    plugins = [ 'org.intellij.intelliLang', 'com.intellij.java', 'com.intellij.java.ide' ] // IDEA only (plugin was previously 'java')
    //plugins = [ 'org.intellij.intelliLang', 'com.intellij.cidr.base', 'com.intellij.cidr.lang' ] // CLion & AppCode
    //plugins = [ 'org.intellij.intelliLang', 'com.intellij.clion', 'com.intellij.cidr.base', 'com.intellij.cidr.lang' ] // CLion only

    // uncomment to test/run/debug the plugin with another IDE such as CLion or AppCode
    //localPath = '<path to>/CLion.app'
    //localPath = 'C:\\Users\\USERNAME\\AppData\\Local\\JetBrains\\Toolbox\\apps\\CLion\\ch-0\\222.3345.126'
    //localPath = "$System.env.HOME/.local/share/JetBrains/Toolbox/apps/CLion/ch-0/222.3345.126"
    //localPath = "$System.env.HOME/.local/share/JetBrains/Toolbox/apps/Rider/ch-0/222.3739.37"

    buildSearchableOptions {
        // workaround for https://youtrack.jetbrains.com/issue/IDEA-210683
        jvmArgs = [
            '--illegal-access=warn',
            '--add-opens=java.base/java.lang=ALL-UNNAMED',
            '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
            '--add-opens=java.base/jdk.internal.vm=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.awt=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.awt.image=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.awt.X11=ALL-UNNAMED', // Linux only
            '--add-opens=java.desktop/sun.font=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.swing=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt.peer=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt.event=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt.X11=ALL-UNNAMED', // Linux only
            '--add-opens=java.desktop/javax.swing=ALL-UNNAMED',
            '--add-opens=java.desktop/javax.swing.text.html=ALL-UNNAMED',
            '--add-opens=java.desktop/javax.swing.plaf.basic=ALL-UNNAMED',
            '--add-opens=java.desktop/com.sun.java.swing.plaf.gtk=ALL-UNNAMED', // Linux only
            '--add-opens=java.desktop/com.apple.eawt.event=ALL-UNNAMED',  // Mac OSX only
            '--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED'
        ]
        enabled = false // workaround for https://youtrack.jetbrains.com/issue/KT-42837
    }

    runIde {
        jvmArgs = [
            '--illegal-access=warn',
            '--add-opens=java.base/java.lang=ALL-UNNAMED',
            '--add-opens=java.base/java.nio=ALL-UNNAMED',
            '--add-opens=java.base/java.util=ALL-UNNAMED',
            '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
            '--add-opens=java.base/jdk.internal.vm=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.awt=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.awt.image=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.awt.X11=ALL-UNNAMED', // Linux only
            '--add-opens=java.desktop/sun.font=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.swing=ALL-UNNAMED',
            '--add-opens=java.desktop/sun.java2d=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt.peer=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt.event=ALL-UNNAMED',
            '--add-opens=java.desktop/java.awt.X11=ALL-UNNAMED', // Linux only
            '--add-opens=java.desktop/javax.swing=ALL-UNNAMED',
            '--add-opens=java.desktop/javax.swing.text.html=ALL-UNNAMED',
            '--add-opens=java.desktop/javax.swing.plaf.basic=ALL-UNNAMED',
            '--add-opens=java.desktop/com.sun.java.swing.plaf.gtk=ALL-UNNAMED', // Linux only
            '--add-opens=java.desktop/com.apple.eawt.event=ALL-UNNAMED',  // Mac OSX only
            '--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED'
        ]
        systemProperties['idea.debug.mode'] = 'true'
        // The package names have to be prefixed with a #
        systemProperties['idea.log.debug.categories'] = '#io.github.intellij.dlanguage'
        //systemProperties['idea.log.trace.categories'] = '#io.github.intellij.dlanguage'

        // Enable internal mode (https://plugins.jetbrains.com/docs/intellij/enabling-internal.html)
        systemProperties['idea.is.internal'] = "true"

        // idea.auto.reload.plugins=false
        systemProperties['ide.show.tips.on.startup.default.value'] = "false"

        // Set these properties to test alternative languages
        // systemProperties["user.language"] = "de"
        // systemProperties["user.country"] = "DE"

        // jbrVersion = null
        // jbrVersion = '11_0_4b304.69'
    }

    publishPlugin {
        token = provider {
            System.getenv('JETBRAINS_TOKEN')
        }
        channels = [publishChannels]
    }
}


task generateSyntaxLexer(type : GenerateLexerTask) {
    // source flex file
    source = 'src/main/jflex/io/github/intellij/dlanguage/lexer/DLanguageLexer.flex'

    // target directory for lexer
    targetDir = 'gen/io/github/intellij/dlanguage/'

    // target classname, target file will be targetDir/targetClass.java
    targetClass = 'DlangLexer'
}

task copyGenScript(type: Copy) {
    from 'src/main/resources/types_regen_script.d'
    into 'gen/io/github/intellij/dlanguage/psi/'
}

task generatePsi(type: Exec) {
    dependsOn copyGenScript
    workingDir 'gen/io/github/intellij/dlanguage/psi/'
    commandLine 'rdmd', 'types_regen_script.d'
}

compileJava{
    dependsOn generateSyntaxLexer
    dependsOn generatePsi
}

compileKotlin{
    dependsOn generateSyntaxLexer
    dependsOn generatePsi
}

repositories {
    mavenCentral()
}

dependencies {
    // According to https://www.jetbrains.org/intellij/sdk/docs/tutorials/kotlin.html
    // we should not need to include kotlin-runtime and kotlin-stdlib jars with a plugin
    // as it's bundled with Intellij, however if we support multiple Intellij versions (which
    // we do) then it may be worth bundling our own kotlin jars
    //compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    //compileOnly "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation project(':utils')
    implementation project(':errorreporting')
    implementation project(':debugger')

    implementation 'com.google.code.gson:gson:2.9.+' // used by dub parser

    testImplementation 'org.mockito.kotlin:mockito-kotlin:4.0+'

    testImplementation 'junit:junit:4.13+'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8+'
}

apply plugin: 'idea'

idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
    }
    module {
        generatedSourceDirs += file('gen')
    }
}
compileKotlin {
    kotlinOptions {
        suppressWarnings = true
        apiVersion = "1.6"
        languageVersion = "1.6"
        jvmTarget = javaVersion
        freeCompilerArgs = [ '-Xjvm-default=enable' ]
    }
}
