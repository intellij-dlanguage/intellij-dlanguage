DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('k')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.version ('version')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Demo')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.LINE_COMMENT ('// compile in this code block for the demo version')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('k')
DlangTokenType.; (';')
WHITE_SPACE ('    ')
DlangTokenType.LINE_COMMENT ('// error, k already defined')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.ID ('x')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')