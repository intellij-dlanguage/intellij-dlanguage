D Language File
  DLanguageDeclarationImpl(DECLARATION)
    DLanguageVariableDeclarationImpl(VARIABLE_DECLARATION)
      DLanguageTypeImpl(TYPE)
        DLanguageType_2Impl(TYPE_2)
          DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
            PsiElement(DlangTokenType.int)('int')
        DLanguageTypeSuffixImpl(TYPE_SUFFIX)
          PsiElement(DlangTokenType.[)('[')
          PsiElement(DlangTokenType.])(']')
      DECLARATOR
        IDENTIFIER
          PsiElement(DlangTokenType.ID)('a')
      PsiElement(DlangTokenType.;)(';')
  DLanguageDeclarationImpl(DECLARATION)
    DLanguageVariableDeclarationImpl(VARIABLE_DECLARATION)
      DLanguageTypeImpl(TYPE)
        DLanguageType_2Impl(TYPE_2)
          DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
            PsiElement(DlangTokenType.int)('int')
        DLanguageTypeSuffixImpl(TYPE_SUFFIX)
          PsiElement(DlangTokenType.[)('[')
          PsiElement(DlangTokenType.])(']')
      DECLARATOR
        IDENTIFIER
          PsiElement(DlangTokenType.ID)('b')
      PsiElement(DlangTokenType.;)(';')
  DLanguageDeclarationImpl(DECLARATION)
    DLanguageVariableDeclarationImpl(VARIABLE_DECLARATION)
      DLanguageTypeImpl(TYPE)
        DLanguageType_2Impl(TYPE_2)
          DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
            PsiElement(DlangTokenType.int)('int')
        DLanguageTypeSuffixImpl(TYPE_SUFFIX)
          PsiElement(DlangTokenType.[)('[')
          PsiElement(DlangTokenType.])(']')
      DECLARATOR
        IDENTIFIER
          PsiElement(DlangTokenType.ID)('c')
      PsiElement(DlangTokenType.;)(';')
  DLanguageDeclarationImpl(DECLARATION)
    UNITTEST
      UNITTEST
        PsiElement(DlangTokenType.unittest)('unittest')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          DLanguageDeclarationsAndStatementsImpl(DECLARATIONS_AND_STATEMENTS)
            DLanguageDeclarationOrStatementImpl(DECLARATION_OR_STATEMENT)
              DLanguageStatementImpl(STATEMENT)
                DLanguageStatementNoCaseNoDefaultImpl(STATEMENT_NO_CASE_NO_DEFAULT)
                  DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
                    DLanguageExpressionImpl(EXPRESSION)
                      DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                        DLanguageCmpExpressionImpl(CMP_EXPRESSION)
                          DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                            DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                              DLanguageIdentifierOrTemplateInstanceImpl(IDENTIFIER_OR_TEMPLATE_INSTANCE)
                                IDENTIFIER
                                  PsiElement(DlangTokenType.ID)('a')
                        PsiElement(DlangTokenType.=)('=')
                        DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                          DLanguageCmpExpressionImpl(CMP_EXPRESSION)
                            DLanguageAddExpressionImpl(ADD_EXPRESSION)
                              DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                  DLanguageIdentifierOrTemplateInstanceImpl(IDENTIFIER_OR_TEMPLATE_INSTANCE)
                                    IDENTIFIER
                                      PsiElement(DlangTokenType.ID)('b')
                              PsiElement(DlangTokenType.~)('~')
                              DLanguageUnaryExpressionImpl(UNARY_EXPRESSION)
                                DLanguagePrimaryExpressionImpl(PRIMARY_EXPRESSION)
                                  DLanguageIdentifierOrTemplateInstanceImpl(IDENTIFIER_OR_TEMPLATE_INSTANCE)
                                    IDENTIFIER
                                      PsiElement(DlangTokenType.ID)('c')
                    PsiElement(DlangTokenType.;)(';')
          PsiComment(DlangTokenType.LINE_COMMENT)('// Create an array from the concatenation')
          PsiComment(DlangTokenType.LINE_COMMENT)('// of the b and c arrays')
          PsiElement(DlangTokenType.})('}')