DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('stdio')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('main')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n\n')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('number')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.ID ('string')
WHITE_SPACE (' ')
DlangTokenType.ID ('message')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.switch ('switch')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('number')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DlangTokenType.default ('default')
DlangTokenType.: (':')
WHITE_SPACE ('    ')
DlangTokenType.LINE_COMMENT ('// valid: ends with 'throw'')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"unknown number"')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DlangTokenType.case ('case')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.: (':')
WHITE_SPACE ('     ')
DlangTokenType.LINE_COMMENT ('// valid: ends with 'break' (break out of the 'switch' only)')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DlangTokenType.ID ('message')
WHITE_SPACE (' ')
DlangTokenType.~= ('~=')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"three "')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DlangTokenType.break ('break')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DlangTokenType.case ('case')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.: (':')
WHITE_SPACE ('     ')
DlangTokenType.LINE_COMMENT ('// valid: ends with 'continue' (continue the enclosing loop)')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DlangTokenType.ID ('message')
WHITE_SPACE (' ')
DlangTokenType.~= ('~=')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"four "')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DlangTokenType.continue ('continue')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DlangTokenType.case ('case')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.: (':')
WHITE_SPACE ('     ')
DlangTokenType.LINE_COMMENT ('// valid: ends with 'goto' (explicit fall-through to next case.)')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DlangTokenType.ID ('message')
WHITE_SPACE (' ')
DlangTokenType.~= ('~=')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"five "')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DlangTokenType.goto ('goto')
WHITE_SPACE (' ')
DlangTokenType.case ('case')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DlangTokenType.case ('case')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('6')
DlangTokenType.: (':')
WHITE_SPACE ('     ')
DlangTokenType.LINE_COMMENT ('// ERROR: implicit fall-through')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DlangTokenType.ID ('message')
WHITE_SPACE (' ')
DlangTokenType.~= ('~=')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"six "')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
WHITE_SPACE ('    ')
DlangTokenType.case ('case')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.: (':')
WHITE_SPACE ('     ')
DlangTokenType.LINE_COMMENT ('// valid: the body is empty')
WHITE_SPACE ('\n')
WHITE_SPACE ('    ')
DlangTokenType.case ('case')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.: (':')
WHITE_SPACE ('     ')
DlangTokenType.LINE_COMMENT ('// valid: this is the last case in the switch statement.')
WHITE_SPACE ('\n')
WHITE_SPACE ('        ')
DlangTokenType.ID ('message')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"one or two"')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.} ('}')
