buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.intellij' version '1.5.3'
    id 'org.jetbrains.kotlin.jvm' version '1.7.0' // This should match the Kotlin version in gradle.properties. (update to '1.5.31' when bump min Intellij)
}


sourceSets {
    main {
        java.srcDirs 'src/main/java', 'src/main/kotlin'
        resources.srcDirs 'src/main/resources'
    }
    test {
        java.srcDirs 'src/test/java', 'src/test/kotlin'
    }
}

version = "${version}"
jar.archiveName "intellij-dub-${version}.jar"

allprojects {
    apply plugin: 'kotlin'
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:deprecation"
    }

    tasks.withType(Test) {
        useJUnit {
            include '**/**/*Test.*' // any Java or Kotlin class that ends with 'Test'
        }

        testLogging {
            beforeSuite { suite ->
                if (!suite.parent) { // will match the outermost suite
                    logger.lifecycle ' ----------- Building Tests -----------'
                } else if (suite.className != null) {
                    logger.lifecycle "${suite.className}:"
                }
            }

            afterTest { descriptor, result ->
                switch (result.resultType) {
                    case 'SUCCESS':
                    case 'PASSED':
                        logger.lifecycle("\t✔ {}", descriptor.name)
                        break
                    case TestResult.ResultType.SKIPPED.name():
                        logger.lifecycle("\t- {}", descriptor.name)
                        break
                    case TestResult.ResultType.FAILURE.name():
                        logger.lifecycle("\t✘ {}", descriptor.name)
                        break
                    default:
                        logger.lifecycle("\t? {} {}", descriptor.name, result.resultType)
                }
            }

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength) + '\n')
                }
            }
        }
    }

    // take the version number defined in gradle build and use that in plugin.xml
    task initConfig(type: Copy) {
        from('src/main/resources') {
            include '**/plugin.xml'
            filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: version])
        }
    }

    apply plugin: 'org.jetbrains.intellij'
    intellij {
        pluginName = 'intellij-dub'
        version = ideaVersion
        updateSinceUntilBuild = false
        plugins = [ 'net.masterthought.dlanguage:1.28.5' ] //, 'terminal' // can specify built in Intellij plugins that our plugin relies on such as 'copyright', 'coverage', or 'yaml'

        runIde {
            jvmArgs = ['--add-exports', 'java.base/jdk.internal.vm=ALL-UNNAMED']
            // jbrVersion = null
        }

        publishPlugin {
            token = provider {
                System.getenv('JETBRAINS_TOKEN')
            }
            channels = [publishChannels]
        }
    }

    task testCompilation(type: Test, group: 'Verification', dependsOn: [classes, testClasses]) {
        testLogging {
            exceptionFormat = 'full'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
//    testCompile 'io.kotlintest:kotlintest:1.3.3'
}

apply plugin: 'idea'
idea {
    project {
        jdkName = javaVersion
        languageLevel = javaVersion
        vcs = 'Git'
    }
}
compileKotlin {
    kotlinOptions {
        suppressWarnings = true
        apiVersion = "1.6"
        languageVersion = "1.6"
        jvmTarget = javaVersion
        freeCompilerArgs = [ '-Xjvm-default=enable' ]
    }
}
