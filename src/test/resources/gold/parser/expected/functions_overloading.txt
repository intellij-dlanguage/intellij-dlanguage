D Language File
  CLASS_DECLARATION
    PsiElement(DlangTokenType.class)('class')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('A')
    DLanguageStructBodyImpl(STRUCT_BODY)
      PsiElement(DlangTokenType.{)('{')
      PsiElement(DlangTokenType.})('}')
  CLASS_DECLARATION
    PsiElement(DlangTokenType.class)('class')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('B')
    PsiElement(DlangTokenType.:)(':')
    DLanguageBaseClassListImpl(BASE_CLASS_LIST)
      DLanguageBaseClassImpl(BASE_CLASS)
        DLanguageBasicTypeImpl(BASIC_TYPE)
          DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
            IDENTIFIER
              PsiElement(DlangTokenType.ID)('A')
    DLanguageStructBodyImpl(STRUCT_BODY)
      PsiElement(DlangTokenType.{)('{')
      PsiElement(DlangTokenType.})('}')
  CLASS_DECLARATION
    PsiElement(DlangTokenType.class)('class')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('C')
    PsiElement(DlangTokenType.:)(':')
    DLanguageBaseClassListImpl(BASE_CLASS_LIST)
      DLanguageBaseClassImpl(BASE_CLASS)
        DLanguageBasicTypeImpl(BASIC_TYPE)
          DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
            IDENTIFIER
              PsiElement(DlangTokenType.ID)('B')
    DLanguageStructBodyImpl(STRUCT_BODY)
      PsiElement(DlangTokenType.{)('{')
      PsiElement(DlangTokenType.})('}')
  FUNCTION_DECLARATION
    DLanguageBasicTypeImpl(BASIC_TYPE)
      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
        PsiElement(DlangTokenType.void)('void')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('foo')
    DLanguageParametersImpl(PARAMETERS)
      PsiElement(DlangTokenType.()('(')
      PARAMETER
        DLanguageTypeImpl(TYPE)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('A')
      PsiElement(DlangTokenType.))(')')
    DLanguageMissingFunctionBodyImpl(MISSING_FUNCTION_BODY)
      PsiElement(DlangTokenType.;)(';')
  FUNCTION_DECLARATION
    DLanguageBasicTypeImpl(BASIC_TYPE)
      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
        PsiElement(DlangTokenType.void)('void')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('foo')
    DLanguageParametersImpl(PARAMETERS)
      PsiElement(DlangTokenType.()('(')
      PARAMETER
        DLanguageTypeImpl(TYPE)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('B')
      PsiElement(DlangTokenType.))(')')
    DLanguageMissingFunctionBodyImpl(MISSING_FUNCTION_BODY)
      PsiElement(DlangTokenType.;)(';')
  FUNCTION_DECLARATION
    DLanguageBasicTypeImpl(BASIC_TYPE)
      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
        PsiElement(DlangTokenType.void)('void')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('test')
    DLanguageParametersImpl(PARAMETERS)
      PsiElement(DlangTokenType.()('(')
      PsiElement(DlangTokenType.))(')')
    DLanguageSpecifiedFunctionBodyImpl(SPECIFIED_FUNCTION_BODY)
      DLanguageBlockStatementImpl(BLOCK_STATEMENT)
        PsiElement(DlangTokenType.{)('{')
        DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
          DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
            DLanguageBasicTypeImpl(BASIC_TYPE)
              DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
                IDENTIFIER
                  PsiElement(DlangTokenType.ID)('C')
            IDENTIFIER_INITIALIZER
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('c')
            PsiElement(DlangTokenType.;)(';')
        PsiComment(DlangTokenType.LINE_COMMENT)('// Both foo(A) and foo(B) match with implicit conversion rules.')
        PsiComment(DlangTokenType.LINE_COMMENT)('// Applying partial ordering rules,')
        PsiComment(DlangTokenType.LINE_COMMENT)('// foo(B) cannot be called with an A, and foo(A) can be called')
        PsiComment(DlangTokenType.LINE_COMMENT)('// with a B. Therefore, foo(B) is more specialized, and is selected.')
        DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
          DLanguageFunctionCallExpressionImpl(FUNCTION_CALL_EXPRESSION)
            DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('foo')
            PsiElement(DlangTokenType.()('(')
            DLanguageArgumentListImpl(ARGUMENT_LIST)
              DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                IDENTIFIER
                  PsiElement(DlangTokenType.ID)('c')
            PsiElement(DlangTokenType.))(')')
          PsiElement(DlangTokenType.;)(';')
        PsiComment(DlangTokenType.LINE_COMMENT)('// calls foo(B)')
        PsiElement(DlangTokenType.})('}')