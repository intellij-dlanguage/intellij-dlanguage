D Language File
  PsiComment(DlangTokenType.LINE_COMMENT)('// ref declares the parameter x to be passed by reference')
  FUNCTION_DECLARATION
    DLanguageBasicTypeImpl(BASIC_TYPE)
      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
        PsiElement(DlangTokenType.void)('void')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('func')
    DLanguageParametersImpl(PARAMETERS)
      PsiElement(DlangTokenType.()('(')
      PARAMETER
        PsiElement(DlangTokenType.ref)('ref')
        DLanguageTypeImpl(TYPE)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
              PsiElement(DlangTokenType.int)('int')
        IDENTIFIER
          PsiElement(DlangTokenType.ID)('x')
      PsiElement(DlangTokenType.))(')')
    DLanguageSpecifiedFunctionBodyImpl(SPECIFIED_FUNCTION_BODY)
      DLanguageBlockStatementImpl(BLOCK_STATEMENT)
        PsiElement(DlangTokenType.{)('{')
        DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
          DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
            DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('x')
            PsiElement(DlangTokenType.++)('++')
          PsiElement(DlangTokenType.;)(';')
        PsiComment(DlangTokenType.LINE_COMMENT)('// so modifications to x will be visible in the caller')
        PsiElement(DlangTokenType.})('}')
  FUNCTION_DECLARATION
    DLanguageBasicTypeImpl(BASIC_TYPE)
      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
        PsiElement(DlangTokenType.void)('void')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('main')
    DLanguageParametersImpl(PARAMETERS)
      PsiElement(DlangTokenType.()('(')
      PsiElement(DlangTokenType.))(')')
    DLanguageSpecifiedFunctionBodyImpl(SPECIFIED_FUNCTION_BODY)
      DLanguageBlockStatementImpl(BLOCK_STATEMENT)
        PsiElement(DlangTokenType.{)('{')
        DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
          DLanguageAutoDeclarationImpl(AUTO_DECLARATION)
            DLanguageStorageClassImpl(STORAGE_CLASS)
              PsiElement(DlangTokenType.auto)('auto')
            AUTO_ASSIGNMENT
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('x')
              PsiElement(DlangTokenType.=)('=')
              DLanguageInitializerImpl(INITIALIZER)
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.INTEGER_LITERAL)('1')
            PsiElement(DlangTokenType.;)(';')
        DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
          DLanguageFunctionCallExpressionImpl(FUNCTION_CALL_EXPRESSION)
            DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('func')
            PsiElement(DlangTokenType.()('(')
            DLanguageArgumentListImpl(ARGUMENT_LIST)
              DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                IDENTIFIER
                  PsiElement(DlangTokenType.ID)('x')
            PsiElement(DlangTokenType.))(')')
          PsiElement(DlangTokenType.;)(';')
        DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
          DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
            PsiElement(DlangTokenType.assert)('assert')
            PsiElement(DlangTokenType.()('(')
            DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
              DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  IDENTIFIER
                    PsiElement(DlangTokenType.ID)('x')
                PsiElement(DlangTokenType.==)('==')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.INTEGER_LITERAL)('2')
            PsiElement(DlangTokenType.))(')')
          PsiElement(DlangTokenType.;)(';')
        PsiComment(DlangTokenType.LINE_COMMENT)('// However, ref is not a type qualifier, so the following is illegal:')
        PsiComment(DlangTokenType.LINE_COMMENT)('//ref(int) y; // Error: ref is not a type qualifier.')
        PsiElement(DlangTokenType.})('}')