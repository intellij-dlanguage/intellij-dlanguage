D Language File
  PsiComment(DlangTokenType.LINE_COMMENT)('// Functions can also be declared as 'ref', meaning their return value is')
  PsiComment(DlangTokenType.LINE_COMMENT)('// passed by reference:')
  FUNCTION_DECLARATION
    DLanguageStorageClassImpl(STORAGE_CLASS)
      PsiElement(DlangTokenType.ref)('ref')
    DLanguageBasicTypeImpl(BASIC_TYPE)
      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
        PsiElement(DlangTokenType.int)('int')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('func2')
    DLanguageParametersImpl(PARAMETERS)
      PsiElement(DlangTokenType.()('(')
      PsiElement(DlangTokenType.))(')')
    DLanguageSpecifiedFunctionBodyImpl(SPECIFIED_FUNCTION_BODY)
      DLanguageBlockStatementImpl(BLOCK_STATEMENT)
        PsiElement(DlangTokenType.{)('{')
        DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
          DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
            DLanguageStorageClassImpl(STORAGE_CLASS)
              PsiElement(DlangTokenType.static)('static')
            DLanguageBasicTypeImpl(BASIC_TYPE)
              DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                PsiElement(DlangTokenType.int)('int')
            IDENTIFIER_INITIALIZER
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('y')
              PsiElement(DlangTokenType.=)('=')
              DLanguageInitializerImpl(INITIALIZER)
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.INTEGER_LITERAL)('0')
            PsiElement(DlangTokenType.;)(';')
        DLanguageReturnStatementImpl(RETURN_STATEMENT)
          PsiElement(DlangTokenType.return)('return')
          DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
            IDENTIFIER
              PsiElement(DlangTokenType.ID)('y')
          PsiElement(DlangTokenType.;)(';')
        PsiElement(DlangTokenType.})('}')
  FUNCTION_DECLARATION
    DLanguageBasicTypeImpl(BASIC_TYPE)
      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
        PsiElement(DlangTokenType.void)('void')
    IDENTIFIER
      PsiElement(DlangTokenType.ID)('main')
    DLanguageParametersImpl(PARAMETERS)
      PsiElement(DlangTokenType.()('(')
      PsiElement(DlangTokenType.))(')')
    DLanguageSpecifiedFunctionBodyImpl(SPECIFIED_FUNCTION_BODY)
      DLanguageBlockStatementImpl(BLOCK_STATEMENT)
        PsiElement(DlangTokenType.{)('{')
        DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
          DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
            DLanguageFunctionCallExpressionImpl(FUNCTION_CALL_EXPRESSION)
              DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                IDENTIFIER
                  PsiElement(DlangTokenType.ID)('func2')
              PsiElement(DlangTokenType.()('(')
              PsiElement(DlangTokenType.))(')')
            PsiElement(DlangTokenType.=)('=')
            DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
              PsiElement(DlangTokenType.INTEGER_LITERAL)('2')
          PsiElement(DlangTokenType.;)(';')
        PsiComment(DlangTokenType.LINE_COMMENT)('// The return value of func2() can be modified.')
        DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
          DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
            PsiElement(DlangTokenType.assert)('assert')
            PsiElement(DlangTokenType.()('(')
            DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
              DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                DLanguageFunctionCallExpressionImpl(FUNCTION_CALL_EXPRESSION)
                  DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    IDENTIFIER
                      PsiElement(DlangTokenType.ID)('func2')
                  PsiElement(DlangTokenType.()('(')
                  PsiElement(DlangTokenType.))(')')
                PsiElement(DlangTokenType.==)('==')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.INTEGER_LITERAL)('2')
            PsiElement(DlangTokenType.))(')')
          PsiElement(DlangTokenType.;)(';')
        PsiComment(DlangTokenType.LINE_COMMENT)('// However, the reference returned by func2() does not propagate to')
        PsiComment(DlangTokenType.LINE_COMMENT)('// variables, because the 'ref' only applies to the return value itself,')
        PsiComment(DlangTokenType.LINE_COMMENT)('// not to any subsequent variable created from it:')
        DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
          DLanguageAutoDeclarationImpl(AUTO_DECLARATION)
            DLanguageStorageClassImpl(STORAGE_CLASS)
              PsiElement(DlangTokenType.auto)('auto')
            AUTO_ASSIGNMENT
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('x')
              PsiElement(DlangTokenType.=)('=')
              DLanguageInitializerImpl(INITIALIZER)
                DLanguageFunctionCallExpressionImpl(FUNCTION_CALL_EXPRESSION)
                  DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    IDENTIFIER
                      PsiElement(DlangTokenType.ID)('func2')
                  PsiElement(DlangTokenType.()('(')
                  PsiElement(DlangTokenType.))(')')
            PsiElement(DlangTokenType.;)(';')
        DLanguageStaticAssertStatementImpl(STATIC_ASSERT_STATEMENT)
          PsiElement(DlangTokenType.static)('static')
          DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
            PsiElement(DlangTokenType.assert)('assert')
            PsiElement(DlangTokenType.()('(')
            DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
              DLanguageIsExpressionImpl(IS_EXPRESSION)
                PsiElement(DlangTokenType.is)('is')
                PsiElement(DlangTokenType.()('(')
                DLanguageTypeImpl(TYPE)
                  DLanguageBasicTypeImpl(BASIC_TYPE)
                    DLanguageTypeofExpressionImpl(TYPEOF_EXPRESSION)
                      PsiElement(DlangTokenType.typeof)('typeof')
                      PsiElement(DlangTokenType.()('(')
                      DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                        IDENTIFIER
                          PsiElement(DlangTokenType.ID)('x')
                      PsiElement(DlangTokenType.))(')')
                PsiElement(DlangTokenType.==)('==')
                DLanguageTypeSpecializationImpl(TYPE_SPECIALIZATION)
                  DLanguageTypeImpl(TYPE)
                    DLanguageBasicTypeImpl(BASIC_TYPE)
                      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                        PsiElement(DlangTokenType.int)('int')
                PsiElement(DlangTokenType.))(')')
            PsiElement(DlangTokenType.))(')')
          PsiElement(DlangTokenType.;)(';')
        PsiComment(DlangTokenType.LINE_COMMENT)('// N.B.: *not* ref(int);')
        PsiComment(DlangTokenType.LINE_COMMENT)('// there is no such type as ref(int).')
        DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
          DLanguagePostfixExpressionImpl(POSTFIX_EXPRESSION)
            DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
              IDENTIFIER
                PsiElement(DlangTokenType.ID)('x')
            PsiElement(DlangTokenType.++)('++')
          PsiElement(DlangTokenType.;)(';')
        DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
          DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
            PsiElement(DlangTokenType.assert)('assert')
            PsiElement(DlangTokenType.()('(')
            DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
              DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  IDENTIFIER
                    PsiElement(DlangTokenType.ID)('x')
                PsiElement(DlangTokenType.==)('==')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.INTEGER_LITERAL)('3')
            PsiElement(DlangTokenType.))(')')
          PsiElement(DlangTokenType.;)(';')
        DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
          DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
            PsiElement(DlangTokenType.assert)('assert')
            PsiElement(DlangTokenType.()('(')
            DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
              DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                DLanguageFunctionCallExpressionImpl(FUNCTION_CALL_EXPRESSION)
                  DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    IDENTIFIER
                      PsiElement(DlangTokenType.ID)('func2')
                  PsiElement(DlangTokenType.()('(')
                  PsiElement(DlangTokenType.))(')')
                PsiElement(DlangTokenType.==)('==')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.INTEGER_LITERAL)('2')
            PsiElement(DlangTokenType.))(')')
          PsiElement(DlangTokenType.;)(';')
        PsiComment(DlangTokenType.LINE_COMMENT)('// x is not a reference to what func2() returned; it')
        PsiComment(DlangTokenType.LINE_COMMENT)('// does not inherit the ref storage class from func2().')
        PsiElement(DlangTokenType.})('}')