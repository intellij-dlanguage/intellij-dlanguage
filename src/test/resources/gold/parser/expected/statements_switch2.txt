D Language File
  UNITTEST
    PsiElement(DlangTokenType.unittest)('unittest')
    DLanguageBlockStatementImpl(BLOCK_STATEMENT)
      PsiElement(DlangTokenType.{)('{')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
              PsiElement(DlangTokenType.int)('int')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('number')
          PsiElement(DlangTokenType.;)(';')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
              PsiElement(DlangTokenType.ID)('string')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('message')
          PsiElement(DlangTokenType.;)(';')
      DLanguageSwitchStatementImpl(SWITCH_STATEMENT)
        PsiElement(DlangTokenType.switch)('switch')
        PsiElement(DlangTokenType.()('(')
        DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
          PsiElement(DlangTokenType.ID)('number')
        PsiElement(DlangTokenType.))(')')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          DLanguageDefaultStatementImpl(DEFAULT_STATEMENT)
            PsiElement(DlangTokenType.default)('default')
            PsiElement(DlangTokenType.:)(':')
            PsiComment(DlangTokenType.LINE_COMMENT)('// valid: ends with 'throw'')
            DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
              DLanguageThrowExpressionImpl(THROW_EXPRESSION)
                PsiElement(DlangTokenType.throw)('throw')
                DLanguageNewExpressionImpl(NEW_EXPRESSION)
                  PsiElement(DlangTokenType.new)('new')
                  DLanguageTypeImpl(TYPE)
                    DLanguageBasicTypeImpl(BASIC_TYPE)
                      DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
                        PsiElement(DlangTokenType.ID)('Exception')
                  DLanguageArgumentsImpl(ARGUMENTS)
                    PsiElement(DlangTokenType.()('(')
                    DLanguageArgumentListImpl(ARGUMENT_LIST)
                      DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                        PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"unknown number"')
                    PsiElement(DlangTokenType.))(')')
              PsiElement(DlangTokenType.;)(';')
          DLanguageCaseStatementImpl(CASE_STATEMENT)
            PsiElement(DlangTokenType.case)('case')
            DLanguageArgumentListImpl(ARGUMENT_LIST)
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('3')
            PsiElement(DlangTokenType.:)(':')
            PsiComment(DlangTokenType.LINE_COMMENT)('// valid: ends with 'break' (break out of the 'switch' only)')
            DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
              DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(DlangTokenType.ID)('message')
                PsiElement(DlangTokenType.~=)('~=')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"three "')
              PsiElement(DlangTokenType.;)(';')
            DLanguageBreakStatementImpl(BREAK_STATEMENT)
              PsiElement(DlangTokenType.break)('break')
              PsiElement(DlangTokenType.;)(';')
          DLanguageCaseStatementImpl(CASE_STATEMENT)
            PsiElement(DlangTokenType.case)('case')
            DLanguageArgumentListImpl(ARGUMENT_LIST)
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('4')
            PsiElement(DlangTokenType.:)(':')
            PsiComment(DlangTokenType.LINE_COMMENT)('// valid: ends with 'continue' (continue the enclosing loop)')
            DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
              DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(DlangTokenType.ID)('message')
                PsiElement(DlangTokenType.~=)('~=')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"four "')
              PsiElement(DlangTokenType.;)(';')
            DLanguageContinueStatementImpl(CONTINUE_STATEMENT)
              PsiElement(DlangTokenType.continue)('continue')
              PsiElement(DlangTokenType.;)(';')
          DLanguageCaseStatementImpl(CASE_STATEMENT)
            PsiElement(DlangTokenType.case)('case')
            DLanguageArgumentListImpl(ARGUMENT_LIST)
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('5')
            PsiElement(DlangTokenType.:)(':')
            PsiComment(DlangTokenType.LINE_COMMENT)('// valid: ends with 'goto' (explicit fall-through to next case.)')
            DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
              DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(DlangTokenType.ID)('message')
                PsiElement(DlangTokenType.~=)('~=')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"five "')
              PsiElement(DlangTokenType.;)(';')
            DLanguageGotoStatementImpl(GOTO_STATEMENT)
              PsiElement(DlangTokenType.goto)('goto')
              PsiElement(DlangTokenType.case)('case')
              PsiElement(DlangTokenType.;)(';')
          DLanguageCaseStatementImpl(CASE_STATEMENT)
            PsiElement(DlangTokenType.case)('case')
            DLanguageArgumentListImpl(ARGUMENT_LIST)
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('6')
            PsiElement(DlangTokenType.:)(':')
            PsiComment(DlangTokenType.LINE_COMMENT)('// ERROR: implicit fall-through')
            DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
              DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(DlangTokenType.ID)('message')
                PsiElement(DlangTokenType.~=)('~=')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"six "')
              PsiElement(DlangTokenType.;)(';')
          DLanguageCaseStatementImpl(CASE_STATEMENT)
            PsiElement(DlangTokenType.case)('case')
            DLanguageArgumentListImpl(ARGUMENT_LIST)
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('1')
            PsiElement(DlangTokenType.:)(':')
          PsiComment(DlangTokenType.LINE_COMMENT)('// valid: the body is empty')
          DLanguageCaseStatementImpl(CASE_STATEMENT)
            PsiElement(DlangTokenType.case)('case')
            DLanguageArgumentListImpl(ARGUMENT_LIST)
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('2')
            PsiElement(DlangTokenType.:)(':')
            PsiComment(DlangTokenType.LINE_COMMENT)('// valid: this is the last case in the switch statement.')
            DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
              DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(DlangTokenType.ID)('message')
                PsiElement(DlangTokenType.=)('=')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"one or two"')
              PsiElement(DlangTokenType.;)(';')
          DLanguageCaseRangeStatementImpl(CASE_RANGE_STATEMENT)
            PsiElement(DlangTokenType.case)('case')
            DLanguageArgumentListImpl(ARGUMENT_LIST)
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('12')
            PsiElement(DlangTokenType.:)(':')
            PsiElement(DlangTokenType...)('..')
            PsiElement(DlangTokenType.case)('case')
            DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
              PsiElement(DlangTokenType.INTEGER_LITERAL)('15')
            PsiElement(DlangTokenType.:)(':')
            PsiComment(DlangTokenType.LINE_COMMENT)('// valid: case range')
            DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
              DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
                DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(DlangTokenType.ID)('message')
                PsiElement(DlangTokenType.~=)('~=')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"twelve to fifteen"')
              PsiElement(DlangTokenType.;)(';')
          PsiElement(DlangTokenType.})('}')
      PsiElement(DlangTokenType.})('}')