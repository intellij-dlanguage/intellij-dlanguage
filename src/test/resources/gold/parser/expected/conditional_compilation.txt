D Language File
  DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
    DLanguageCompileConditionImpl(COMPILE_CONDITION)
      DLanguageVersionConditionImpl(VERSION_CONDITION)
        PsiElement(DlangTokenType.version)('version')
        PsiElement(DlangTokenType.()('(')
        PsiElement(DlangTokenType.ID)('ProfessionalEdition')
        PsiElement(DlangTokenType.))(')')
    DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
      PsiElement(DlangTokenType.{)('{')
      VERSION_SPECIFICATION
        PsiElement(DlangTokenType.version)('version')
        PsiElement(DlangTokenType.=)('=')
        PsiElement(DlangTokenType.ID)('FeatureA')
        PsiElement(DlangTokenType.;)(';')
      VERSION_SPECIFICATION
        PsiElement(DlangTokenType.version)('version')
        PsiElement(DlangTokenType.=)('=')
        PsiElement(DlangTokenType.ID)('FeatureB')
        PsiElement(DlangTokenType.;)(';')
      VERSION_SPECIFICATION
        PsiElement(DlangTokenType.version)('version')
        PsiElement(DlangTokenType.=)('=')
        PsiElement(DlangTokenType.ID)('FeatureC')
        PsiElement(DlangTokenType.;)(';')
      PsiElement(DlangTokenType.})('}')
  DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
    DLanguageCompileConditionImpl(COMPILE_CONDITION)
      DLanguageVersionConditionImpl(VERSION_CONDITION)
        PsiElement(DlangTokenType.version)('version')
        PsiElement(DlangTokenType.()('(')
        PsiElement(DlangTokenType.ID)('HomeEdition')
        PsiElement(DlangTokenType.))(')')
    DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
      PsiElement(DlangTokenType.{)('{')
      VERSION_SPECIFICATION
        PsiElement(DlangTokenType.version)('version')
        PsiElement(DlangTokenType.=)('=')
        PsiElement(DlangTokenType.ID)('FeatureA')
        PsiElement(DlangTokenType.;)(';')
      PsiElement(DlangTokenType.})('}')
  FUNCTION_DECLARATION
    DLanguageBasicTypeImpl(BASIC_TYPE)
      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
        PsiElement(DlangTokenType.void)('void')
    PsiElement(DlangTokenType.ID)('testFoo')
    DLanguageParametersImpl(PARAMETERS)
      PsiElement(DlangTokenType.()('(')
      PsiElement(DlangTokenType.))(')')
    DLanguageSpecifiedFunctionBodyImpl(SPECIFIED_FUNCTION_BODY)
      DLanguageBlockStatementImpl(BLOCK_STATEMENT)
        PsiElement(DlangTokenType.{)('{')
        DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
          DLanguageCompileConditionImpl(COMPILE_CONDITION)
            DLanguageDebugConditionImpl(DEBUG_CONDITION)
              PsiElement(DlangTokenType.debug)('debug')
              PsiElement(DlangTokenType.()('(')
              PsiElement(DlangTokenType.ID)('foo')
              PsiElement(DlangTokenType.))(')')
          DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
            DLanguageFunctionCallExpressionImpl(FUNCTION_CALL_EXPRESSION)
              DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(DlangTokenType.ID)('writeln')
              PsiElement(DlangTokenType.()('(')
              DLanguageArgumentListImpl(ARGUMENT_LIST)
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"Foo"')
              PsiElement(DlangTokenType.))(')')
            PsiElement(DlangTokenType.;)(';')
        PsiElement(DlangTokenType.})('}')
  DLanguageDebugSpecificationImpl(DEBUG_SPECIFICATION)
    PsiElement(DlangTokenType.debug)('debug')
    PsiElement(DlangTokenType.=)('=')
    PsiElement(DlangTokenType.ID)('foo')
    PsiElement(DlangTokenType.;)(';')
    PsiComment(DlangTokenType.LINE_COMMENT)('// error, foo used before set')
  UNITTEST
    PsiElement(DlangTokenType.unittest)('unittest')
    DLanguageBlockStatementImpl(BLOCK_STATEMENT)
      PsiElement(DlangTokenType.{)('{')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
              PsiElement(DlangTokenType.int)('int')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('k')
          PsiElement(DlangTokenType.;)(';')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DlangTokenType.version)('version')
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.ID)('Demo')
            PsiElement(DlangTokenType.))(')')
        PsiComment(DlangTokenType.LINE_COMMENT)('// compile in this code block for the demo version')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
            DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
              DLanguageBasicTypeImpl(BASIC_TYPE)
                DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                  PsiElement(DlangTokenType.int)('int')
              IDENTIFIER_INITIALIZER
                PsiElement(DlangTokenType.ID)('i')
              PsiElement(DlangTokenType.;)(';')
          DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
            DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
              DLanguageBasicTypeImpl(BASIC_TYPE)
                DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                  PsiElement(DlangTokenType.int)('int')
              IDENTIFIER_INITIALIZER
                PsiElement(DlangTokenType.ID)('k')
              PsiElement(DlangTokenType.;)(';')
              PsiComment(DlangTokenType.LINE_COMMENT)('// error, k already defined')
          DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
            DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
              DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(DlangTokenType.ID)('i')
              PsiElement(DlangTokenType.=)('=')
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('3')
            PsiElement(DlangTokenType.;)(';')
          PsiElement(DlangTokenType.})('}')
      DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
        DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
          DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(DlangTokenType.ID)('x')
          PsiElement(DlangTokenType.=)('=')
          DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
            PsiElement(DlangTokenType.ID)('i')
        PsiElement(DlangTokenType.;)(';')
      PsiComment(DlangTokenType.LINE_COMMENT)('// uses the i declared above')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DlangTokenType.version)('version')
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.ID)('X86')
            PsiElement(DlangTokenType.))(')')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          PsiElement(DlangTokenType.})('}')
        PsiElement(DlangTokenType.else)('else')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          PsiElement(DlangTokenType.})('}')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DlangTokenType.version)('version')
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.ID)('FeatureB')
            PsiElement(DlangTokenType.))(')')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          PsiElement(DlangTokenType.})('}')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DlangTokenType.version)('version')
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.ID)('Foo')
            PsiElement(DlangTokenType.))(')')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
            DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
              DLanguageBasicTypeImpl(BASIC_TYPE)
                DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                  PsiElement(DlangTokenType.int)('int')
              IDENTIFIER_INITIALIZER
                PsiElement(DlangTokenType.ID)('x')
              PsiElement(DlangTokenType.;)(';')
          PsiElement(DlangTokenType.})('}')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        CLASS_DECLARATION
          PsiElement(DlangTokenType.class)('class')
          PsiElement(DlangTokenType.ID)('Foo')
          DLanguageStructBodyImpl(STRUCT_BODY)
            PsiElement(DlangTokenType.{)('{')
            DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
              DLanguageBasicTypeImpl(BASIC_TYPE)
                DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                  PsiElement(DlangTokenType.int)('int')
              IDENTIFIER_INITIALIZER
                PsiElement(DlangTokenType.ID)('a')
              PsiElement(DlangTokenType.,)(',')
              IDENTIFIER_INITIALIZER
                PsiElement(DlangTokenType.ID)('b')
              PsiElement(DlangTokenType.;)(';')
            DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
              DLanguageCompileConditionImpl(COMPILE_CONDITION)
                DLanguageVersionConditionImpl(VERSION_CONDITION)
                  PsiElement(DlangTokenType.version)('version')
                  PsiElement(DlangTokenType.()('(')
                  PsiElement(DlangTokenType.ID)('full')
                  PsiElement(DlangTokenType.))(')')
              DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
                PsiElement(DlangTokenType.{)('{')
                FUNCTION_DECLARATION
                  DLanguageBasicTypeImpl(BASIC_TYPE)
                    DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                      PsiElement(DlangTokenType.int)('int')
                  PsiElement(DlangTokenType.ID)('extrafunctionality')
                  DLanguageParametersImpl(PARAMETERS)
                    PsiElement(DlangTokenType.()('(')
                    PsiElement(DlangTokenType.))(')')
                  DLanguageSpecifiedFunctionBodyImpl(SPECIFIED_FUNCTION_BODY)
                    DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                      PsiElement(DlangTokenType.{)('{')
                      DLanguageReturnStatementImpl(RETURN_STATEMENT)
                        PsiElement(DlangTokenType.return)('return')
                        DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                          PsiElement(DlangTokenType.INTEGER_LITERAL)('1')
                        PsiElement(DlangTokenType.;)(';')
                      PsiComment(DlangTokenType.LINE_COMMENT)('// extra functionality is supported')
                      PsiElement(DlangTokenType.})('}')
                PsiElement(DlangTokenType.})('}')
              PsiElement(DlangTokenType.else)('else')
              PsiComment(DlangTokenType.LINE_COMMENT)('// demo')
              DLanguageDeclarationBlockImpl(DECLARATION_BLOCK)
                PsiElement(DlangTokenType.{)('{')
                FUNCTION_DECLARATION
                  DLanguageBasicTypeImpl(BASIC_TYPE)
                    DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                      PsiElement(DlangTokenType.int)('int')
                  PsiElement(DlangTokenType.ID)('extrafunctionality')
                  DLanguageParametersImpl(PARAMETERS)
                    PsiElement(DlangTokenType.()('(')
                    PsiElement(DlangTokenType.))(')')
                  DLanguageSpecifiedFunctionBodyImpl(SPECIFIED_FUNCTION_BODY)
                    DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                      PsiElement(DlangTokenType.{)('{')
                      DLanguageReturnStatementImpl(RETURN_STATEMENT)
                        PsiElement(DlangTokenType.return)('return')
                        DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                          PsiElement(DlangTokenType.INTEGER_LITERAL)('0')
                        PsiElement(DlangTokenType.;)(';')
                      PsiComment(DlangTokenType.LINE_COMMENT)('// extra functionality is not supported')
                      PsiElement(DlangTokenType.})('}')
                PsiElement(DlangTokenType.})('}')
            PsiElement(DlangTokenType.})('}')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DlangTokenType.version)('version')
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.ID)('n')
            PsiElement(DlangTokenType.))(')')
        PsiComment(DlangTokenType.LINE_COMMENT)('// add in version code if version level is >= n')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          PsiElement(DlangTokenType.})('}')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DlangTokenType.version)('version')
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.ID)('identifier')
            PsiElement(DlangTokenType.))(')')
        PsiComment(DlangTokenType.LINE_COMMENT)('// add in version code if version')
        PsiComment(DlangTokenType.LINE_COMMENT)('// keyword is identifier')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          PsiElement(DlangTokenType.})('}')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageVersionConditionImpl(VERSION_CONDITION)
            PsiElement(DlangTokenType.version)('version')
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.ID)('DigitalMars_funky_extension')
            PsiElement(DlangTokenType.))(')')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          PsiElement(DlangTokenType.})('}')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        CLASS_DECLARATION
          PsiElement(DlangTokenType.class)('class')
          PsiElement(DlangTokenType.ID)('Foo')
          DLanguageStructBodyImpl(STRUCT_BODY)
            PsiElement(DlangTokenType.{)('{')
            DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
              DLanguageBasicTypeImpl(BASIC_TYPE)
                DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                  PsiElement(DlangTokenType.int)('int')
              IDENTIFIER_INITIALIZER
                PsiElement(DlangTokenType.ID)('a')
              PsiElement(DlangTokenType.,)(',')
              IDENTIFIER_INITIALIZER
                PsiElement(DlangTokenType.ID)('b')
              PsiElement(DlangTokenType.;)(';')
            DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
              DLanguageCompileConditionImpl(COMPILE_CONDITION)
                DLanguageDebugConditionImpl(DEBUG_CONDITION)
                  PsiElement(DlangTokenType.debug)('debug')
              PsiElement(DlangTokenType.:)(':')
              DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
                DLanguageBasicTypeImpl(BASIC_TYPE)
                  DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                    PsiElement(DlangTokenType.int)('int')
                IDENTIFIER_INITIALIZER
                  PsiElement(DlangTokenType.ID)('flag')
                PsiElement(DlangTokenType.;)(';')
            PsiElement(DlangTokenType.})('}')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageDebugConditionImpl(DEBUG_CONDITION)
            PsiElement(DlangTokenType.debug)('debug')
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.ID)('IntegerLiteral')
            PsiElement(DlangTokenType.))(')')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          PsiElement(DlangTokenType.})('}')
      PsiComment(DlangTokenType.LINE_COMMENT)('// add in debug code if debug level is >= IntegerLiteral')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageDebugConditionImpl(DEBUG_CONDITION)
            PsiElement(DlangTokenType.debug)('debug')
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.ID)('identifier')
            PsiElement(DlangTokenType.))(')')
        DLanguageBlockStatementImpl(BLOCK_STATEMENT)
          PsiElement(DlangTokenType.{)('{')
          PsiElement(DlangTokenType.})('}')
      PsiComment(DlangTokenType.LINE_COMMENT)('// add in debug code if debug keyword is identifier')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageStorageClassImpl(STORAGE_CLASS)
            PsiElement(DlangTokenType.const)('const')
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
              PsiElement(DlangTokenType.int)('int')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('i')
            PsiElement(DlangTokenType.=)('=')
            DLanguageInitializerImpl(INITIALIZER)
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('3')
          PsiElement(DlangTokenType.;)(';')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
              PsiElement(DlangTokenType.int)('int')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('j')
            PsiElement(DlangTokenType.=)('=')
            DLanguageInitializerImpl(INITIALIZER)
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('4')
          PsiElement(DlangTokenType.;)(';')
      DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
        DLanguageCompileConditionImpl(COMPILE_CONDITION)
          DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
            PsiElement(DlangTokenType.static)('static')
            PsiElement(DlangTokenType.if)('if')
            PsiElement(DlangTokenType.()('(')
            DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
              DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(DlangTokenType.ID)('i')
              PsiElement(DlangTokenType.==)('==')
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('3')
            PsiElement(DlangTokenType.))(')')
        PsiComment(DlangTokenType.LINE_COMMENT)('// ok, at module scope')
        DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
          DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
            DLanguageBasicTypeImpl(BASIC_TYPE)
              DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                PsiElement(DlangTokenType.int)('int')
            IDENTIFIER_INITIALIZER
              PsiElement(DlangTokenType.ID)('x')
            PsiElement(DlangTokenType.;)(';')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        CLASS_DECLARATION
          PsiElement(DlangTokenType.class)('class')
          PsiElement(DlangTokenType.ID)('C')
          DLanguageStructBodyImpl(STRUCT_BODY)
            PsiElement(DlangTokenType.{)('{')
            DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
              DLanguageStorageClassImpl(STORAGE_CLASS)
                PsiElement(DlangTokenType.const)('const')
              DLanguageBasicTypeImpl(BASIC_TYPE)
                DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                  PsiElement(DlangTokenType.int)('int')
              IDENTIFIER_INITIALIZER
                PsiElement(DlangTokenType.ID)('k')
                PsiElement(DlangTokenType.=)('=')
                DLanguageInitializerImpl(INITIALIZER)
                  DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                    PsiElement(DlangTokenType.INTEGER_LITERAL)('5')
              PsiElement(DlangTokenType.;)(';')
            DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
              DLanguageCompileConditionImpl(COMPILE_CONDITION)
                DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                  PsiElement(DlangTokenType.static)('static')
                  PsiElement(DlangTokenType.if)('if')
                  PsiElement(DlangTokenType.()('(')
                  DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                    DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(DlangTokenType.ID)('i')
                    PsiElement(DlangTokenType.==)('==')
                    DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                      PsiElement(DlangTokenType.INTEGER_LITERAL)('3')
                  PsiElement(DlangTokenType.))(')')
              PsiComment(DlangTokenType.LINE_COMMENT)('// ok')
              DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
                DLanguageBasicTypeImpl(BASIC_TYPE)
                  DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                    PsiElement(DlangTokenType.int)('int')
                IDENTIFIER_INITIALIZER
                  PsiElement(DlangTokenType.ID)('x')
                PsiElement(DlangTokenType.;)(';')
              PsiElement(DlangTokenType.else)('else')
              DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
                DLanguageBasicTypeImpl(BASIC_TYPE)
                  DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                    PsiElement(DlangTokenType.long)('long')
                IDENTIFIER_INITIALIZER
                  PsiElement(DlangTokenType.ID)('x')
                PsiElement(DlangTokenType.;)(';')
            DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
              DLanguageCompileConditionImpl(COMPILE_CONDITION)
                DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                  PsiElement(DlangTokenType.static)('static')
                  PsiElement(DlangTokenType.if)('if')
                  PsiElement(DlangTokenType.()('(')
                  DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                    DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(DlangTokenType.ID)('j')
                    PsiElement(DlangTokenType.==)('==')
                    DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                      PsiElement(DlangTokenType.INTEGER_LITERAL)('3')
                  PsiElement(DlangTokenType.))(')')
              PsiComment(DlangTokenType.LINE_COMMENT)('// error, j is not a constant')
              DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
                DLanguageBasicTypeImpl(BASIC_TYPE)
                  DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                    PsiElement(DlangTokenType.int)('int')
                IDENTIFIER_INITIALIZER
                  PsiElement(DlangTokenType.ID)('y')
                PsiElement(DlangTokenType.;)(';')
            DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
              DLanguageCompileConditionImpl(COMPILE_CONDITION)
                DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                  PsiElement(DlangTokenType.static)('static')
                  PsiElement(DlangTokenType.if)('if')
                  PsiElement(DlangTokenType.()('(')
                  DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                    DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(DlangTokenType.ID)('k')
                    PsiElement(DlangTokenType.==)('==')
                    DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                      PsiElement(DlangTokenType.INTEGER_LITERAL)('5')
                  PsiElement(DlangTokenType.))(')')
              PsiComment(DlangTokenType.LINE_COMMENT)('// ok, k is in current scope')
              DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
                DLanguageBasicTypeImpl(BASIC_TYPE)
                  DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                    PsiElement(DlangTokenType.int)('int')
                IDENTIFIER_INITIALIZER
                  PsiElement(DlangTokenType.ID)('z')
                PsiElement(DlangTokenType.;)(';')
            PsiElement(DlangTokenType.})('}')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        TEMPLATE_DECLARATION
          PsiElement(DlangTokenType.template)('template')
          PsiElement(DlangTokenType.ID)('INT')
          DLanguageTemplateParametersImpl(TEMPLATE_PARAMETERS)
            PsiElement(DlangTokenType.()('(')
            DLanguageTemplateParameterListImpl(TEMPLATE_PARAMETER_LIST)
              TEMPLATE_PARAMETER
                DLanguageTemplateValueParameterImpl(TEMPLATE_VALUE_PARAMETER)
                  DLanguageTypeImpl(TYPE)
                    DLanguageBasicTypeImpl(BASIC_TYPE)
                      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                        PsiElement(DlangTokenType.int)('int')
                  PsiElement(DlangTokenType.ID)('i')
            PsiElement(DlangTokenType.))(')')
          PsiElement(DlangTokenType.{)('{')
          DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
            DLanguageCompileConditionImpl(COMPILE_CONDITION)
              DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                PsiElement(DlangTokenType.static)('static')
                PsiElement(DlangTokenType.if)('if')
                PsiElement(DlangTokenType.()('(')
                DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                  DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                    PsiElement(DlangTokenType.ID)('i')
                  PsiElement(DlangTokenType.==)('==')
                  DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                    PsiElement(DlangTokenType.INTEGER_LITERAL)('32')
                PsiElement(DlangTokenType.))(')')
            DLanguageAliasDeclarationImpl(ALIAS_DECLARATION)
              PsiElement(DlangTokenType.alias)('alias')
              ALIAS_INITIALIZER
                PsiElement(DlangTokenType.ID)('INT')
                PsiElement(DlangTokenType.=)('=')
                DLanguageTypeImpl(TYPE)
                  DLanguageBasicTypeImpl(BASIC_TYPE)
                    DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                      PsiElement(DlangTokenType.int)('int')
              PsiElement(DlangTokenType.;)(';')
            PsiElement(DlangTokenType.else)('else')
            DLanguageConditionalDeclarationImpl(CONDITIONAL_DECLARATION)
              DLanguageCompileConditionImpl(COMPILE_CONDITION)
                DLanguageStaticIfConditionImpl(STATIC_IF_CONDITION)
                  PsiElement(DlangTokenType.static)('static')
                  PsiElement(DlangTokenType.if)('if')
                  PsiElement(DlangTokenType.()('(')
                  DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
                    DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                      PsiElement(DlangTokenType.ID)('i')
                    PsiElement(DlangTokenType.==)('==')
                    DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                      PsiElement(DlangTokenType.INTEGER_LITERAL)('16')
                  PsiElement(DlangTokenType.))(')')
              DLanguageAliasDeclarationImpl(ALIAS_DECLARATION)
                PsiElement(DlangTokenType.alias)('alias')
                ALIAS_INITIALIZER
                  PsiElement(DlangTokenType.ID)('INT')
                  PsiElement(DlangTokenType.=)('=')
                  DLanguageTypeImpl(TYPE)
                    DLanguageBasicTypeImpl(BASIC_TYPE)
                      DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
                        PsiElement(DlangTokenType.short)('short')
                PsiElement(DlangTokenType.;)(';')
              PsiElement(DlangTokenType.else)('else')
              DLanguageStaticAssertDeclarationImpl(STATIC_ASSERT_DECLARATION)
                PsiElement(DlangTokenType.static)('static')
                DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
                  PsiElement(DlangTokenType.assert)('assert')
                  PsiElement(DlangTokenType.()('(')
                  DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
                    DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                      PsiElement(DlangTokenType.INTEGER_LITERAL)('0')
                  PsiElement(DlangTokenType.))(')')
                PsiElement(DlangTokenType.;)(';')
                PsiComment(DlangTokenType.LINE_COMMENT)('// not supported')
          PsiElement(DlangTokenType.})('}')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
              DLanguageTemplateInstanceImpl(TEMPLATE_INSTANCE)
                PsiElement(DlangTokenType.ID)('INT')
                DLanguageTemplateArgumentsImpl(TEMPLATE_ARGUMENTS)
                  PsiElement(DlangTokenType.!)('!')
                  PsiElement(DlangTokenType.()('(')
                  DLanguageTemplateArgumentListImpl(TEMPLATE_ARGUMENT_LIST)
                    DLanguageTemplateArgumentImpl(TEMPLATE_ARGUMENT)
                      DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                        PsiElement(DlangTokenType.INTEGER_LITERAL)('32')
                  PsiElement(DlangTokenType.))(')')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('a')
          PsiElement(DlangTokenType.;)(';')
          PsiComment(DlangTokenType.LINE_COMMENT)('// a is an int')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
              DLanguageTemplateInstanceImpl(TEMPLATE_INSTANCE)
                PsiElement(DlangTokenType.ID)('INT')
                DLanguageTemplateArgumentsImpl(TEMPLATE_ARGUMENTS)
                  PsiElement(DlangTokenType.!)('!')
                  PsiElement(DlangTokenType.()('(')
                  DLanguageTemplateArgumentListImpl(TEMPLATE_ARGUMENT_LIST)
                    DLanguageTemplateArgumentImpl(TEMPLATE_ARGUMENT)
                      DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                        PsiElement(DlangTokenType.INTEGER_LITERAL)('16')
                  PsiElement(DlangTokenType.))(')')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('b')
          PsiElement(DlangTokenType.;)(';')
          PsiComment(DlangTokenType.LINE_COMMENT)('// b is a short')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
              DLanguageTemplateInstanceImpl(TEMPLATE_INSTANCE)
                PsiElement(DlangTokenType.ID)('INT')
                DLanguageTemplateArgumentsImpl(TEMPLATE_ARGUMENTS)
                  PsiElement(DlangTokenType.!)('!')
                  PsiElement(DlangTokenType.()('(')
                  DLanguageTemplateArgumentListImpl(TEMPLATE_ARGUMENT_LIST)
                    DLanguageTemplateArgumentImpl(TEMPLATE_ARGUMENT)
                      DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                        PsiElement(DlangTokenType.INTEGER_LITERAL)('17')
                  PsiElement(DlangTokenType.))(')')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('c')
          PsiElement(DlangTokenType.;)(';')
          PsiComment(DlangTokenType.LINE_COMMENT)('// error, static assert trips')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        FUNCTION_DECLARATION
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
              PsiElement(DlangTokenType.void)('void')
          PsiElement(DlangTokenType.ID)('foo')
          DLanguageParametersImpl(PARAMETERS)
            PsiElement(DlangTokenType.()('(')
            PsiElement(DlangTokenType.))(')')
          DLanguageSpecifiedFunctionBodyImpl(SPECIFIED_FUNCTION_BODY)
            DLanguageBlockStatementImpl(BLOCK_STATEMENT)
              PsiElement(DlangTokenType.{)('{')
              DLanguageIfStatementImpl(IF_STATEMENT)
                PsiElement(DlangTokenType.if)('if')
                PsiElement(DlangTokenType.()('(')
                DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                  PsiElement(DlangTokenType.INTEGER_LITERAL)('0')
                PsiElement(DlangTokenType.))(')')
                DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                  PsiElement(DlangTokenType.{)('{')
                  DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
                    DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
                      PsiElement(DlangTokenType.assert)('assert')
                      PsiElement(DlangTokenType.()('(')
                      DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
                        DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                          PsiElement(DlangTokenType.INTEGER_LITERAL)('0')
                      PsiElement(DlangTokenType.))(')')
                    PsiElement(DlangTokenType.;)(';')
                  PsiComment(DlangTokenType.LINE_COMMENT)('// never trips')
                  DLanguageStaticAssertStatementImpl(STATIC_ASSERT_STATEMENT)
                    PsiElement(DlangTokenType.static)('static')
                    DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
                      PsiElement(DlangTokenType.assert)('assert')
                      PsiElement(DlangTokenType.()('(')
                      DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
                        DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                          PsiElement(DlangTokenType.INTEGER_LITERAL)('0')
                      PsiElement(DlangTokenType.))(')')
                    PsiElement(DlangTokenType.;)(';')
                  PsiComment(DlangTokenType.LINE_COMMENT)('// always trips')
                  PsiElement(DlangTokenType.})('}')
              DLanguageConditionalStatementImpl(CONDITIONAL_STATEMENT)
                DLanguageCompileConditionImpl(COMPILE_CONDITION)
                  DLanguageVersionConditionImpl(VERSION_CONDITION)
                    PsiElement(DlangTokenType.version)('version')
                    PsiElement(DlangTokenType.()('(')
                    PsiElement(DlangTokenType.ID)('BAR')
                    PsiElement(DlangTokenType.))(')')
                DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                  PsiElement(DlangTokenType.{)('{')
                  PsiElement(DlangTokenType.})('}')
                PsiElement(DlangTokenType.else)('else')
                DLanguageBlockStatementImpl(BLOCK_STATEMENT)
                  PsiElement(DlangTokenType.{)('{')
                  DLanguageStaticAssertStatementImpl(STATIC_ASSERT_STATEMENT)
                    PsiElement(DlangTokenType.static)('static')
                    DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
                      PsiElement(DlangTokenType.assert)('assert')
                      PsiElement(DlangTokenType.()('(')
                      DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
                        DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                          PsiElement(DlangTokenType.INTEGER_LITERAL)('0')
                      PsiElement(DlangTokenType.))(')')
                    PsiElement(DlangTokenType.;)(';')
                  PsiComment(DlangTokenType.LINE_COMMENT)('// trips when version BAR is not defined')
                  PsiElement(DlangTokenType.})('}')
              PsiElement(DlangTokenType.})('}')
      PsiElement(DlangTokenType.})('}')