D Language File
  UNITTEST
    PsiElement(DlangTokenType.unittest)('unittest')
    DLanguageBlockStatementImpl(BLOCK_STATEMENT)
      PsiElement(DlangTokenType.{)('{')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
              PsiElement(DlangTokenType.int)('int')
          DLanguageTypeSuffixImpl(TYPE_SUFFIX)
            PsiElement(DlangTokenType.[)('[')
            DLanguageTypeImpl(TYPE)
              DLanguageBasicTypeImpl(BASIC_TYPE)
                DLanguageQualifiedIdentifierImpl(QUALIFIED_IDENTIFIER)
                  PsiElement(DlangTokenType.ID)('string')
            PsiElement(DlangTokenType.])(']')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('aa')
          PsiElement(DlangTokenType.;)(';')
          PsiComment(DlangTokenType.LINE_COMMENT)('// Associative array of ints that are')
      PsiComment(DlangTokenType.LINE_COMMENT)('// indexed by string keys.')
      PsiComment(DlangTokenType.LINE_COMMENT)('// The KeyType is string.')
      DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
        DLanguageAssignExpressionImpl(ASSIGN_EXPRESSION)
          DLanguageArrayAccessExpressionImpl(ARRAY_ACCESS_EXPRESSION)
            DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
              PsiElement(DlangTokenType.ID)('aa')
            DLanguageIndexExpressionImpl(INDEX_EXPRESSION)
              PsiElement(DlangTokenType.[)('[')
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"hello"')
              PsiElement(DlangTokenType.])(']')
          PsiElement(DlangTokenType.=)('=')
          DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
            PsiElement(DlangTokenType.INTEGER_LITERAL)('3')
        PsiElement(DlangTokenType.;)(';')
      PsiComment(DlangTokenType.LINE_COMMENT)('// set value associated with key "hello" to 3')
      DLanguageDeclarationStatementImpl(DECLARATION_STATEMENT)
        DLanguageSpecifiedVariableDeclarationImpl(VARIABLE_DECLARATION)
          DLanguageBasicTypeImpl(BASIC_TYPE)
            DLanguageBuiltinTypeImpl(BUILTIN_TYPE)
              PsiElement(DlangTokenType.int)('int')
          IDENTIFIER_INITIALIZER
            PsiElement(DlangTokenType.ID)('value')
            PsiElement(DlangTokenType.=)('=')
            DLanguageInitializerImpl(INITIALIZER)
              DLanguageArrayAccessExpressionImpl(ARRAY_ACCESS_EXPRESSION)
                DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                  PsiElement(DlangTokenType.ID)('aa')
                DLanguageIndexExpressionImpl(INDEX_EXPRESSION)
                  PsiElement(DlangTokenType.[)('[')
                  DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                    PsiElement(DlangTokenType.DOUBLE_QUOTED_STRING)('"hello"')
                  PsiElement(DlangTokenType.])(']')
          PsiElement(DlangTokenType.;)(';')
          PsiComment(DlangTokenType.LINE_COMMENT)('// lookup value from a key')
      DLanguageExpressionStatementImpl(EXPRESSION_STATEMENT)
        DLanguageAssertExpressionImpl(ASSERT_EXPRESSION)
          PsiElement(DlangTokenType.assert)('assert')
          PsiElement(DlangTokenType.()('(')
          DLanguageAssertArgumentsImpl(ASSERT_ARGUMENTS)
            DLanguageEqualExpressionImpl(EQUAL_EXPRESSION)
              DLanguageReferenceExpressionImpl(REFERENCE_EXPRESSION)
                PsiElement(DlangTokenType.ID)('value')
              PsiElement(DlangTokenType.==)('==')
              DLanguageLiteralExpressionImpl(LITERAL_EXPRESSION)
                PsiElement(DlangTokenType.INTEGER_LITERAL)('3')
          PsiElement(DlangTokenType.))(')')
        PsiElement(DlangTokenType.;)(';')
      PsiElement(DlangTokenType.})('}')