DlangTokenType.BLOCK_DOC ('/**\n$(D std._parallelism) implements high-level primitives for SMP _parallelism.\nThese include parallel foreach, parallel reduce, parallel eager map, pipelining\nand future/promise _parallelism.  $(D std._parallelism) is recommended when the\nsame operation is to be executed in parallel on different data, or when a\nfunction is to be executed in a background thread and its result returned to a\nwell-defined main thread.  For communication between arbitrary threads, see\n$(D std.concurrency).\n\n$(D std._parallelism) is based on the concept of a $(D Task).  A $(D Task) is an\nobject that represents the fundamental unit of work in this library and may be\nexecuted in parallel with any other $(D Task).  Using $(D Task)\ndirectly allows programming with a future/promise paradigm.  All other\nsupported _parallelism paradigms (parallel foreach, map, reduce, pipelining)\nrepresent an additional level of abstraction over $(D Task).  They\nautomatically create one or more $(D Task) objects, or closely related types\nthat are conceptually identical but not part of the public API.\n\nAfter creation, a $(D Task) may be executed in a new thread, or submitted\nto a $(D TaskPool) for execution.  A $(D TaskPool) encapsulates a task queue\nand its worker threads.  Its purpose is to efficiently map a large\nnumber of $(D Task)s onto a smaller number of threads.  A task queue is a\nFIFO queue of $(D Task) objects that have been submitted to the\n$(D TaskPool) and are awaiting execution.  A worker thread is a thread that\nis associated with exactly one task queue.  It executes the $(D Task) at the\nfront of its queue when the queue has work available, or sleeps when\nno work is available.  Each task queue is associated with zero or\nmore worker threads.  If the result of a $(D Task) is needed before execution\nby a worker thread has begun, the $(D Task) can be removed from the task queue\nand executed immediately in the thread where the result is needed.\n\nWarning:  Unless marked as $(D @trusted) or $(D @safe), artifacts in\n          this module allow implicit data sharing between threads and cannot\n          guarantee that client code is free from low level data races.\n\nSource:    $(PHOBOSSRC std/_parallelism.d)\nAuthor:  David Simcha\nCopyright:  Copyright (c) 2009-2011, David Simcha.\nLicense:    $(HTTP boost.org/LICENSE_1_0.txt, Boost License 1.0)\n*/')
WHITE_SPACE ('\n')
DlangTokenType.module ('module')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallelism')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_DOC ('///')
WHITE_SPACE ('\n')
DlangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('algorithm')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('map')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('range')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('iota')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('math')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('approxEqual')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallelism')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('taskPool')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Parallel reduce can be combined with')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// std.algorithm.map to interesting effect.')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// The following example (thanks to Russel Winder)')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// calculates pi by quadrature  using')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// std.algorithm.map and TaskPool.reduce.')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// getTerm is evaluated in parallel as needed by')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// TaskPool.reduce.')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// Timings on an Intel i5-3450 quad core machine')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// for n = 1_000_000_000:')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('//')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// TaskPool.reduce:       1.067 s')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// std.algorithm.reduce:  4.011 s')
WHITE_SPACE ('\n\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('n')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1_000_000')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('delta')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.FLOAT_LITERAL ('1.0')
WHITE_SPACE (' ')
DlangTokenType./ ('/')
WHITE_SPACE (' ')
DlangTokenType.ID ('n')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('getTerm')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('x')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.FLOAT_LITERAL ('0.5')
WHITE_SPACE (' ')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('delta')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('delta')
WHITE_SPACE (' ')
DlangTokenType./ ('/')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.FLOAT_LITERAL ('1.0')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('x')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('x')
WHITE_SPACE (' ')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('pi')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.FLOAT_LITERAL ('4.0')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.ID ('n')
DlangTokenType.. ('.')
DlangTokenType.ID ('iota')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.ID ('getTerm')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('pi')
DlangTokenType.. ('.')
DlangTokenType.ID ('approxEqual')
DlangTokenType.( ('(')
DlangTokenType.FLOAT_LITERAL ('3.1415926')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('atomic')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('exception')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('memory')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('sync')
DlangTokenType.. ('.')
DlangTokenType.ID ('condition')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('thread')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('algorithm')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('conv')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('exception')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('functional')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('math')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('meta')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('range')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('traits')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('typecons')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('OSX')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.version ('version')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('useSysctlbyname')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('FreeBSD')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.version ('version')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('useSysctlbyname')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('NetBSD')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.version ('version')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('useSysctlbyname')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('Windows')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// BUGS:  Only works on Windows 2000 and above.')
WHITE_SPACE ('\n    ')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('sys')
DlangTokenType.. ('.')
DlangTokenType.ID ('windows')
DlangTokenType.. ('.')
DlangTokenType.ID ('windows')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('SYSTEM_INFO')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('GetSystemInfo')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('SYSTEM_INFO')
WHITE_SPACE (' ')
DlangTokenType.ID ('si')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('GetSystemInfo')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('si')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('totalCPUs')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('max')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('si')
DlangTokenType.. ('.')
DlangTokenType.ID ('dwNumberOfProcessors')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('linux')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('sys')
DlangTokenType.. ('.')
DlangTokenType.ID ('posix')
DlangTokenType.. ('.')
DlangTokenType.ID ('unistd')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('_SC_NPROCESSORS_ONLN')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('sysconf')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('totalCPUs')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('sysconf')
DlangTokenType.( ('(')
DlangTokenType.ID ('_SC_NPROCESSORS_ONLN')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('Solaris')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('sys')
DlangTokenType.. ('.')
DlangTokenType.ID ('posix')
DlangTokenType.. ('.')
DlangTokenType.ID ('unistd')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('_SC_NPROCESSORS_ONLN')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('sysconf')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('totalCPUs')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('sysconf')
DlangTokenType.( ('(')
DlangTokenType.ID ('_SC_NPROCESSORS_ONLN')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('useSysctlbyname')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.extern ('extern')
DlangTokenType.( ('(')
DlangTokenType.ID ('C')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('sysctlbyname')
DlangTokenType.( ('(')
WHITE_SPACE ('\n        ')
DlangTokenType.const ('const')
WHITE_SPACE (' ')
DlangTokenType.char ('char')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE ('\n    ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('OSX')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('nameStr')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"machdep.cpu.core_count\0"')
DlangTokenType.. ('.')
DlangTokenType.ID ('ptr')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('FreeBSD')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('nameStr')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"hw.ncpu\0"')
DlangTokenType.. ('.')
DlangTokenType.ID ('ptr')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('NetBSD')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('nameStr')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"hw.ncpu\0"')
DlangTokenType.. ('.')
DlangTokenType.ID ('ptr')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.uint ('uint')
WHITE_SPACE (' ')
DlangTokenType.ID ('ans')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
DlangTokenType.. ('.')
DlangTokenType.ID ('sizeof')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('sysctlbyname')
DlangTokenType.( ('(')
DlangTokenType.ID ('nameStr')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('ans')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('len')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('totalCPUs')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('ans')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.else ('else')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Don't know how to get N CPUs on this OS."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('cacheLineSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('cpuid')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('datacache')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('lineSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('cachelevel')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('datacache')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('cachelevel')
DlangTokenType.. ('.')
DlangTokenType.ID ('lineSize')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.ID ('lineSize')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('cachelevel')
DlangTokenType.. ('.')
DlangTokenType.ID ('lineSize')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
DlangTokenType.. ('.')
DlangTokenType.ID ('max')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('lineSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('cachelevel')
DlangTokenType.. ('.')
DlangTokenType.ID ('lineSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('cacheLineSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('lineSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n\n')
DlangTokenType.BLOCK_COMMENT ('/* Atomics code.  These forward to core.atomic, but are written like this\n   for two reasons:\n\n   1.  They used to actually contain ASM code and I don' want to have to change\n       to directly calling core.atomic in a zillion different places.\n\n   2.  core.atomic has some misc. issues that make my use cases difficult\n       without wrapping it.  If I didn't wrap it, casts would be required\n       basically everywhere.\n*/')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('atomicSetUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('stuff')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('newVal')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.__traits ('__traits')
DlangTokenType.( ('(')
DlangTokenType.ID ('isIntegral')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ubyte ('ubyte')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('//core.atomic.cas(cast(shared) &stuff, stuff, newVal);')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('atomicStore')
DlangTokenType.( ('(')
DlangTokenType.* ('*')
DlangTokenType.( ('(')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.shared ('shared')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('stuff')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('newVal')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.ubyte ('ubyte')
WHITE_SPACE (' ')
DlangTokenType.ID ('atomicReadUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('val')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.__traits ('__traits')
DlangTokenType.( ('(')
DlangTokenType.ID ('isIntegral')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ubyte ('ubyte')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('atomicLoad')
DlangTokenType.( ('(')
DlangTokenType.* ('*')
DlangTokenType.( ('(')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.shared ('shared')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('val')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// This gets rid of the need for a lot of annoying casts in other parts of the')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// code, when enums are involved.')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('atomicCasUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('stuff')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('testVal')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('newVal')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.__traits ('__traits')
DlangTokenType.( ('(')
DlangTokenType.ID ('isIntegral')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ubyte ('ubyte')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('atomic')
DlangTokenType.. ('.')
DlangTokenType.ID ('cas')
DlangTokenType.( ('(')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.shared ('shared')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('stuff')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('testVal')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('newVal')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_COMMENT ('/*--------------------- Generic helper functions, etc.------------------------*/')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('MapType')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.... ('...')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('ElementType')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('MapType')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE ('\n        ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('adjoin')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('staticMap')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('unaryFun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('ReduceType')
DlangTokenType.( ('(')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('R')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('ReduceType')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('binaryFun')
DlangTokenType.! ('!')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('E')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('ElementType')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('noUnsharedAliasing')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('noUnsharedAliasing')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.ID ('hasUnsharedAliasing')
DlangTokenType.! ('!')
DlangTokenType.ID ('T')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// This template tests whether a function may be executed in parallel from')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// @safe code via Task.executeInNewThread().  There is an additional')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// requirement for executing it via a TaskPool.  (See isSafeReturn).')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE ('\n        ')
DlangTokenType.( ('(')
DlangTokenType.ID ('functionAttributes')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('FunctionAttribute')
DlangTokenType.. ('.')
DlangTokenType.ID ('safe')
WHITE_SPACE (' ')
DlangTokenType.| ('|')
WHITE_SPACE (' ')
DlangTokenType.ID ('FunctionAttribute')
DlangTokenType.. ('.')
DlangTokenType.ID ('trusted')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.!= ('!=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n        ')
DlangTokenType.( ('(')
DlangTokenType.ID ('functionAttributes')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
WHITE_SPACE (' ')
DlangTokenType.ID ('FunctionAttribute')
DlangTokenType.. ('.')
DlangTokenType.ID ('ref_')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n        ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isFunctionPointer')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
WHITE_SPACE (' ')
DlangTokenType.|| ('||')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.ID ('hasUnsharedAliasing')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('allSatisfy')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('noUnsharedAliasing')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Parameters')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('F1')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.function ('function')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('safe')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('F2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.function ('function')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('F3')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.function ('function')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('string')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('F4')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.function ('function')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.char ('char')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('F1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('F2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('F3')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('F4')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('F5')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.function ('function')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('string')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.pure ('pure')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('F5')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// This function decides whether Tasks that meet all of the other requirements')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// for being executed from @safe code can be executed on a TaskPool.')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// When executing via TaskPool, it's theoretically possible')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// to return a value that is also pointed to by a worker thread's thread local')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// storage.  When executing from executeInNewThread(), the thread that executed')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// the Task is terminated by the time the return value is visible in the calling')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// thread, so this is a non-issue.  It's also a non-issue for pure functions')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// since they can't read global state.')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeReturn')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('hasUnsharedAliasing')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.. ('.')
DlangTokenType.ID ('ReturnType')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeReturn')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.. ('.')
DlangTokenType.ID ('isPure')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeReturn')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeReturn')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('randAssignable')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('randAssignable')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('isRandomAccessRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('hasAssignableElements')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ubyte ('ubyte')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('notStarted')
DlangTokenType., (',')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('inProgress')
DlangTokenType., (',')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('done')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('AliasReturn')
DlangTokenType.( ('(')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
DlangTokenType.... ('...')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('AliasReturn')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.{ ('{')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.} ('}')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// Should be private, but std.algorithm.reduce is used in the zero-thread case')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// and won't work w/ private.')
WHITE_SPACE ('\n')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceAdjoin')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.... ('...')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceAdjoin')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('binaryFun')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceAdjoin')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('U')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('lhs')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('U')
WHITE_SPACE (' ')
DlangTokenType.ID ('rhs')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('funs')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('staticMap')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('binaryFun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Unused')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('lhs')
DlangTokenType.. ('.')
DlangTokenType.ID ('expand')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('lhs')
DlangTokenType.. ('.')
DlangTokenType.ID ('expand')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('funs')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.( ('(')
DlangTokenType.ID ('lhs')
DlangTokenType.. ('.')
DlangTokenType.ID ('expand')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('rhs')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('lhs')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceFinish')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.... ('...')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceFinish')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('binaryFun')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceFinish')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('lhs')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('rhs')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('funs')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('staticMap')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('binaryFun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Unused')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('lhs')
DlangTokenType.. ('.')
DlangTokenType.ID ('expand')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('lhs')
DlangTokenType.. ('.')
DlangTokenType.ID ('expand')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('funs')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.( ('(')
DlangTokenType.ID ('lhs')
DlangTokenType.. ('.')
DlangTokenType.ID ('expand')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('rhs')
DlangTokenType.. ('.')
DlangTokenType.ID ('expand')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('lhs')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('isRoundRobin')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('RoundRobinBuffer')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('C1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('C2')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('C1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('C2')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('isRoundRobin')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('isRoundRobin')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('isRoundRobin')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('isRoundRobin')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('RoundRobinBuffer')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.char ('char')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isRoundRobin')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// This is the base "class" for all of the other tasks.  Using C-style')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// polymorphism to allow more direct control over memory allocation, etc.')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.struct ('struct')
WHITE_SPACE (' ')
DlangTokenType.ID ('AbstractTask')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('prev')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('next')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Pointer to a function that executes this task.')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.function ('function')
DlangTokenType.( ('(')
DlangTokenType.void ('void')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('runTask')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('exception')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ubyte ('ubyte')
WHITE_SPACE (' ')
DlangTokenType.ID ('taskStatus')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('notStarted')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('done')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('atomicReadUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('taskStatus')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('exception')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.ID ('exception')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('job')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('runTask')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.this ('this')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\n$(D Task) represents the fundamental unit of work.  A $(D Task) may be\nexecuted in parallel with any other $(D Task).  Using this struct directly\nallows future/promise _parallelism.  In this paradigm, a function (or delegate\nor other callable) is executed in a thread other than the one it was called\nfrom.  The calling thread does not block while the function is being executed.\nA call to $(D workForce), $(D yieldForce), or $(D spinForce) is used to\nensure that the $(D Task) has finished executing and to obtain the return\nvalue, if any.  These functions and $(D done) also act as full memory barriers,\nmeaning that any memory writes made in the thread that executed the $(D Task)\nare guaranteed to be visible in the calling thread after one of these functions\nreturns.\n\nThe $(REF task, std,parallelism) and $(REF scopedTask, std,parallelism) functions can\nbe used to create an instance of this struct.  See $(D task) for usage examples.\n\nFunction results are returned from $(D yieldForce), $(D spinForce) and\n$(D workForce) by ref.  If $(D fun) returns by ref, the reference will point\nto the returned reference of $(D fun).  Otherwise it will point to a\nfield in this struct.\n\nCopying of this struct is disabled, since it would provide no useful semantics.\nIf you want to pass this struct around, you should do so by reference or\npointer.\n\nBugs:  Changes to $(D ref) and $(D out) arguments are not propagated to the\n       call site, only to $(D args) in this struct.\n*/')
WHITE_SPACE ('\n')
DlangTokenType.struct ('struct')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.( ('(')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('AbstractTask')
WHITE_SPACE (' ')
DlangTokenType.ID ('base')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
DlangTokenType.ID ('runTask')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('impl')
DlangTokenType.} ('}')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('base')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('basePtr')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('base')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('impl')
DlangTokenType.( ('(')
DlangTokenType.void ('void')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('myTask')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('algorithm')
DlangTokenType.. ('.')
DlangTokenType.ID ('internal')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('addressOf')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('Task')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('myCastedTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('myTask')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('myCastedTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('addressOf')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('myCastedTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('myCastedTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('returnVal')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('addressOf')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('myCastedTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('myCastedTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('returnVal')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('myCastedTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('isScoped')
DlangTokenType.; (';')
WHITE_SPACE ('  ')
DlangTokenType.LINE_COMMENT ('// True if created with scopedTask.')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('_args')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    The arguments the function was called with.  Changes to $(D out) and\n    $(D ref) arguments will be visible here.\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.__traits ('__traits')
DlangTokenType.( ('(')
DlangTokenType.ID ('isSame')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('run')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('_args')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n\n    ')
DlangTokenType.LINE_COMMENT ('// The purpose of this code is to decide whether functions whose')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// return values have unshared aliasing can be executed via')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// TaskPool from @safe code.  See isSafeReturn.')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.__traits ('__traits')
DlangTokenType.( ('(')
DlangTokenType.ID ('isSame')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('run')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isFunctionPointer')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('isPure')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('functionAttributes')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
WHITE_SPACE (' ')
DlangTokenType.ID ('FunctionAttribute')
DlangTokenType.. ('.')
DlangTokenType.ID ('pure_')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// BUG:  Should check this for delegates too, but std.traits')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('//       apparently doesn't allow this.  isPure is irrelevant')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('//       for delegates, at least for now since shared delegates')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('//       don't work.')
WHITE_SPACE ('\n            ')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('isPure')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// We already know that we can't execute aliases in @safe code, so')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// just put a dummy value here.')
WHITE_SPACE ('\n        ')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('isPure')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    The return type of the function called by this $(D Task).  This can be\n    $(D void).\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('_args')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('_args')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// Ref return.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('ReturnType')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('returnVal')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.ID ('fixRef')
DlangTokenType.( ('(')
DlangTokenType.ID ('ReturnType')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('val')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
DlangTokenType.ID ('val')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.ID ('returnVal')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.ID ('fixRef')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.ID ('val')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('val')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('enforcePool')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('enforce')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Job not submitted yet."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('_args')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Work around DMD bug 6588, allow immutable elements.')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('allSatisfy')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('isAssignable')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('opAssign')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('rhs')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Type')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('tupleof')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('tupleof')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('rhs')
DlangTokenType.. ('.')
DlangTokenType.ID ('tupleof')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('disable')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('opAssign')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('rhs')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    If the $(D Task) isn't started yet, execute it in the current thread.\n    If it's done, return its return value, if any.  If it's in progress,\n    busy spin until it's done, then return the return value.  If it threw\n    an exception, rethrow that exception.\n\n    This function should be used when you expect the result of the\n    $(D Task) to be available on a timescale shorter than that of an OS\n    context switch.\n     */')
WHITE_SPACE ('\n    ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.ID ('spinForce')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('enforcePool')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('tryDeleteExecute')
DlangTokenType.( ('(')
DlangTokenType.ID ('basePtr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.while ('while')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('atomicReadUbyte')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.!= ('!=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('exception')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.ID ('exception')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('fixRef')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('returnVal')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    If the $(D Task) isn't started yet, execute it in the current thread.\n    If it's done, return its return value, if any.  If it's in progress,\n    wait on a condition variable.  If it threw an exception, rethrow that\n    exception.\n\n    This function should be used for expensive functions, as waiting on a\n    condition variable introduces latency, but avoids wasted CPU cycles.\n     */')
WHITE_SPACE ('\n    ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.ID ('yieldForce')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('enforcePool')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('tryDeleteExecute')
DlangTokenType.( ('(')
DlangTokenType.ID ('basePtr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('fixRef')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('returnVal')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('waiterLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('waiterUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.while ('while')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('atomicReadUbyte')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.!= ('!=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('waitUntilCompletion')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('exception')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.ID ('exception')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('fixRef')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('returnVal')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    If this $(D Task) was not started yet, execute it in the current\n    thread.  If it is finished, return its result.  If it is in progress,\n    execute any other $(D Task) from the $(D TaskPool) instance that\n    this $(D Task) was submitted to until this one\n    is finished.  If it threw an exception, rethrow that exception.\n    If no other tasks are available or this $(D Task) was executed using\n    $(D executeInNewThread), wait on a condition variable.\n     */')
WHITE_SPACE ('\n    ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.ID ('workForce')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('enforcePool')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('tryDeleteExecute')
DlangTokenType.( ('(')
DlangTokenType.ID ('basePtr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.while ('while')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.true ('true')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
WHITE_SPACE ('    ')
DlangTokenType.LINE_COMMENT ('// done() implicitly checks for exceptions.')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('fixRef')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('returnVal')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('job')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// Locking explicitly and calling popNoSync() because')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// pop() waits on a condition variable if there are no Tasks')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// in the queue.')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('job')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('popNoSync')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('job')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n\n                ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('verboseUnittest')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Doing workForce work."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('doJob')
DlangTokenType.( ('(')
DlangTokenType.ID ('job')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('ReturnType')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.return ('return')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('fixRef')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('returnVal')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('verboseUnittest')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Yield from workForce."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Returns $(D true) if the $(D Task) is finished executing.\n\n    Throws:  Rethrows any exception thrown during the execution of the\n             $(D Task).\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('done')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// Explicitly forwarded for documentation purposes.')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('base')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Create a new thread for executing this $(D Task), execute it in the\n    newly created thread, then terminate the thread.  This can be used for\n    future/promise parallelism.  An explicit priority may be given\n    to the $(D Task).  If one is provided, its value is forwarded to\n    $(D core.thread.Thread.priority). See $(REF task, std,parallelism) for\n    usage example.\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('executeInNewThread')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.ID ('basePtr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_DOC ('/// Ditto')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('executeInNewThread')
DlangTokenType.( ('(')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('priority')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.ID ('basePtr')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('priority')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('safe')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isScoped')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('taskStatus')
WHITE_SPACE (' ')
DlangTokenType.!= ('!=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// When this is uncommented, it somehow gets called on returning from')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// scopedTask even though the struct shouldn't be getting copied.')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('//@disable this(this) {}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// Calls $(D fpOrDelegate) with $(D args).  This is an')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// adapter that makes $(D Task) work with delegates, function pointers and')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// functors instead of just aliases.')
WHITE_SPACE ('\n')
DlangTokenType.ID ('ReturnType')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
WHITE_SPACE (' ')
DlangTokenType.ID ('run')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
WHITE_SPACE (' ')
DlangTokenType.ID ('fpOrDelegate')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('fpOrDelegate')
DlangTokenType.( ('(')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\nCreates a $(D Task) on the GC heap that calls an alias.  This may be executed\nvia $(D Task.executeInNewThread) or by submitting to a\n$(REF TaskPool, std,parallelism).  A globally accessible instance of\n$(D TaskPool) is provided by $(REF taskPool, std,parallelism).\n\nReturns:  A pointer to the $(D Task).\n\nExample:\n---\n// Read two files into memory at the same time.\nimport std.file;\n\nvoid main()\n{\n    // Create and execute a Task for reading\n    // foo.txt.\n    auto file1Task = task!read("foo.txt");\n    file1Task.executeInNewThread();\n\n    // Read bar.txt in parallel.\n    auto file2Data = read("bar.txt");\n\n    // Get the results of reading foo.txt.\n    auto file1Data = file1Task.yieldForce;\n}\n---\n\n---\n// Sorts an array using a parallel quick sort algorithm.\n// The first partition is done serially.  Both recursion\n// branches are then executed in parallel.\n//\n// Timings for sorting an array of 1,000,000 doubles on\n// an Athlon 64 X2 dual core machine:\n//\n// This implementation:               176 milliseconds.\n// Equivalent serial implementation:  280 milliseconds\nvoid parallelSort(T)(T[] data)\n{\n    // Sort small subarrays serially.\n    if (data.length < 100)\n    {\n         std.algorithm.sort(data);\n         return;\n    }\n\n    // Partition the array.\n    swap(data[$ / 2], data[$ - 1]);\n    auto pivot = data[$ - 1];\n    bool lessThanPivot(T elem) { return elem < pivot; }\n\n    auto greaterEqual = partition!lessThanPivot(data[0..$ - 1]);\n    swap(data[$ - greaterEqual.length - 1], data[$ - 1]);\n\n    auto less = data[0..$ - greaterEqual.length - 1];\n    greaterEqual = data[$ - greaterEqual.length..$];\n\n    // Execute both recursion branches in parallel.\n    auto recurseTask = task!parallelSort(greaterEqual);\n    taskPool.put(recurseTask);\n    parallelSort(less);\n    recurseTask.yieldForce;\n}\n---\n*/')
WHITE_SPACE ('\n')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\nCreates a $(D Task) on the GC heap that calls a function pointer, delegate, or\nclass/struct with overloaded opCall.\n\nExample:\n---\n// Read two files in at the same time again,\n// but this time use a function pointer instead\n// of an alias to represent std.file.read.\nimport std.file;\n\nvoid main()\n{\n    // Create and execute a Task for reading\n    // foo.txt.\n    auto file1Task = task(&read, "foo.txt");\n    file1Task.executeInNewThread();\n\n    // Read bar.txt in parallel.\n    auto file2Data = read("bar.txt");\n\n    // Get the results of reading foo.txt.\n    auto file1Data = file1Task.yieldForce;\n}\n---\n\nNotes: This function takes a non-scope delegate, meaning it can be\n       used with closures.  If you can't allocate a closure due to objects\n       on the stack that have scoped destruction, see $(D scopedTask), which\n       takes a scope delegate.\n */')
WHITE_SPACE ('\n')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
WHITE_SPACE (' ')
DlangTokenType.ID ('delegateOrFp')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('delegateOrFp')
DlangTokenType.( ('(')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('run')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('F')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('delegateOrFp')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\nVersion of $(D task) usable from $(D @safe) code.  Usage mechanics are\nidentical to the non-@safe case, but safety introduces some restrictions:\n\n1.  $(D fun) must be @safe or @trusted.\n\n2.  $(D F) must not have any unshared aliasing as defined by\n    $(REF hasUnsharedAliasing, std,traits).  This means it\n    may not be an unshared delegate or a non-shared class or struct\n    with overloaded $(D opCall).  This also precludes accepting template\n    alias parameters.\n\n3.  $(D Args) must not have unshared aliasing.\n\n4.  $(D fun) must not return by reference.\n\n5.  The return type must not have unshared aliasing unless $(D fun) is\n    $(D pure) or the $(D Task) is executed via $(D executeInNewThread) instead\n    of using a $(D TaskPool).\n\n*/')
WHITE_SPACE ('\n')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('run')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('F')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\nThese functions allow the creation of $(D Task) objects on the stack rather\nthan the GC heap.  The lifetime of a $(D Task) created by $(D scopedTask)\ncannot exceed the lifetime of the scope it was created in.\n\n$(D scopedTask) might be preferred over $(D task):\n\n1.  When a $(D Task) that calls a delegate is being created and a closure\n    cannot be allocated due to objects on the stack that have scoped\n    destruction.  The delegate overload of $(D scopedTask) takes a $(D scope)\n    delegate.\n\n2.  As a micro-optimization, to avoid the heap allocation associated with\n    $(D task) or with the creation of a closure.\n\nUsage is otherwise identical to $(D task).\n\nNotes:  $(D Task) objects created using $(D scopedTask) will automatically\ncall $(D Task.yieldForce) in their destructor if necessary to ensure\nthe $(D Task) is complete before the stack frame they reside on is destroyed.\n*/')
WHITE_SPACE ('\n')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedTask')
DlangTokenType.( ('(')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('ret')
DlangTokenType.. ('.')
DlangTokenType.ID ('isScoped')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_DOC ('/// Ditto')
WHITE_SPACE ('\n')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedTask')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.scope ('scope')
WHITE_SPACE (' ')
DlangTokenType.ID ('F')
WHITE_SPACE (' ')
DlangTokenType.ID ('delegateOrFp')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('delegateOrFp')
DlangTokenType.( ('(')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('run')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('F')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('delegateOrFp')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('ret')
DlangTokenType.. ('.')
DlangTokenType.ID ('isScoped')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_DOC ('/// Ditto')
WHITE_SPACE ('\n')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedTask')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('F')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSafeTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('F')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('run')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('F')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('ret')
DlangTokenType.. ('.')
DlangTokenType.ID ('isScoped')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\nThe total number of CPU cores available on the current machine, as reported by\nthe operating system.\n*/')
WHITE_SPACE ('\n')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
WHITE_SPACE (' ')
DlangTokenType.ID ('totalCPUs')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_COMMENT ('/*\nThis class serves two purposes:\n\n1.  It distinguishes std.parallelism threads from other threads so that\n    the std.parallelism daemon threads can be terminated.\n\n2.  It adds a reference to the pool that the thread is a member of,\n    which is also necessary to allow the daemon threads to be properly\n    terminated.\n*/')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.final ('final')
WHITE_SPACE (' ')
DlangTokenType.class ('class')
WHITE_SPACE (' ')
DlangTokenType.ID ('ParallelismThread')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('dg')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.super ('super')
DlangTokenType.( ('(')
DlangTokenType.ID ('dg')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// Kill daemon threads.')
WHITE_SPACE ('\n')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('thread')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('pthread')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('ParallelismThread')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('thread')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('pthread')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.continue ('continue')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pthread')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('isDaemon')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.continue ('continue')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('stop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pthread')
DlangTokenType.. ('.')
DlangTokenType.ID ('join')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\nThis class encapsulates a task queue and a set of worker threads.  Its purpose\nis to efficiently map a large number of $(D Task)s onto a smaller number of\nthreads.  A task queue is a FIFO queue of $(D Task) objects that have been\nsubmitted to the $(D TaskPool) and are awaiting execution.  A worker thread is a\nthread that executes the $(D Task) at the front of the queue when one is\navailable and sleeps when the queue is empty.\n\nThis class should usually be used via the global instantiation\navailable via the $(REF taskPool, std,parallelism) property.\nOccasionally it is useful to explicitly instantiate a $(D TaskPool):\n\n1.  When you want $(D TaskPool) instances with multiple priorities, for example\n    a low priority pool and a high priority pool.\n\n2.  When the threads in the global task pool are waiting on a synchronization\n    primitive (for example a mutex), and you want to parallelize the code that\n    needs to run before these threads can be resumed.\n */')
WHITE_SPACE ('\n')
DlangTokenType.final ('final')
WHITE_SPACE (' ')
DlangTokenType.class ('class')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
DlangTokenType.: (':')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// A pool can either be a regular pool or a single-task pool.  A')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// single-task pool is a dummy pool that's fired up for')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// Task.executeInNewThread().')
WHITE_SPACE ('\n    ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('ParallelismThread')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('Thread')
WHITE_SPACE (' ')
DlangTokenType.ID ('singleTaskThread')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('head')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('tail')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('PoolState')
WHITE_SPACE (' ')
DlangTokenType.ID ('status')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('running')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('Condition')
WHITE_SPACE (' ')
DlangTokenType.ID ('workerCondition')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('Condition')
WHITE_SPACE (' ')
DlangTokenType.ID ('waiterCondition')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('Mutex')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueMutex')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('Mutex')
WHITE_SPACE (' ')
DlangTokenType.ID ('waiterMutex')
DlangTokenType.; (';')
WHITE_SPACE ('  ')
DlangTokenType.LINE_COMMENT ('// For waiterCondition')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// The instanceStartIndex of the next instance that will be created.')
WHITE_SPACE ('\n    ')
DlangTokenType.__gshared ('__gshared')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextInstanceIndex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// The index of the current thread.')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('threadIndex')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// The index of the first thread in this instance.')
WHITE_SPACE ('\n    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('instanceStartIndex')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// The index that the next thread to be initialized in this pool will have.')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextThreadIndex')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ubyte ('ubyte')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('running')
DlangTokenType., (',')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('finishing')
DlangTokenType., (',')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('stopNow')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('doJob')
DlangTokenType.( ('(')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('job')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('job')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('inProgress')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('job')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('job')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('waiterLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('waiterUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('notifyWaiters')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.try ('try')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('job')
DlangTokenType.. ('.')
DlangTokenType.ID ('job')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.catch ('catch')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('job')
DlangTokenType.. ('.')
DlangTokenType.ID ('exception')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('atomicSetUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('job')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// This function is used for dummy pools created by Task.executeInNewThread().')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('doSingleTask')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// No synchronization.  Pool is guaranteed to only have one thread,')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// and the queue is submitted to before this thread is created.')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('head')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('t')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('head')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('t')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('t')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('head')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('doJob')
DlangTokenType.( ('(')
DlangTokenType.ID ('t')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// This function performs initialization for each thread that affects')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// thread local storage and therefore must be done from within the')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// worker thread.  It then calls executeWorkLoop().')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('startWorkLoop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// Initialize thread index.')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('threadIndex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextThreadIndex')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('nextThreadIndex')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('executeWorkLoop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// This is the main work loop that worker threads spend their time in')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// until they terminate.  It's also entered by non-worker threads when')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// finish() is called with the blocking variable set to true.')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('executeWorkLoop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.while ('while')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('atomicReadUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('status')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.!= ('!=')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('stopNow')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('atomicReadUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('status')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('finishing')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('atomicSetUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('status')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('stopNow')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('doJob')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Pop a task off the queue.')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('pop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('popNoSync')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.while ('while')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('ret')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('status')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('running')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('wait')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('ret')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('popNoSync')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('popNoSync')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.out ('out')
DlangTokenType.( ('(')
DlangTokenType.ID ('returned')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.BLOCK_COMMENT ('/* If task.prev and task.next aren't null, then another thread\n         * can try to delete this task from the pool after it's\n         * alreadly been deleted/popped.\n         */')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('returned')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('returned')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('returned')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.do ('do')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('returned')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('head')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('head')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('head')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('head')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('returned')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('returned')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('returned')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('inProgress')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('head')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('head')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('returned')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Push a task onto the queue.')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('abstractPut')
DlangTokenType.( ('(')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('abstractPutNoSync')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('abstractPutNoSync')
DlangTokenType.( ('(')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.in ('in')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.out ('out')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.ID ('tail')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('text')
DlangTokenType.( ('(')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.CHARACTER_LITERAL (''\t'')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.ID ('tail')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('text')
DlangTokenType.( ('(')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.CHARACTER_LITERAL (''\t'')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.do ('do')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// Not using enforce() to save on function call overhead since this')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// is a performance critical function.')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('status')
WHITE_SPACE (' ')
DlangTokenType.!= ('!=')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('running')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Error')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Cannot submit a new task to a pool after calling "')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
WHITE_SPACE ('\n                ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"finish() or stop()."')
WHITE_SPACE ('\n            ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('head')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('   ')
DlangTokenType.LINE_COMMENT ('//Queue is empty.')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('head')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tail')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('tail')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('tail')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tail')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('notify')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('abstractPutGroupNoSync')
DlangTokenType.( ('(')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('h')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('t')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('status')
WHITE_SPACE (' ')
DlangTokenType.!= ('!=')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('running')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Error')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Cannot submit a new task to a pool after calling "')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
WHITE_SPACE ('\n                ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"finish() or stop()."')
WHITE_SPACE ('\n            ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('head')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('head')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('h')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tail')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('t')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('h')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('tail')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('h')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tail')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('t')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('notifyAll')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('tryDeleteExecute')
DlangTokenType.( ('(')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('toExecute')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.return ('return')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.ID ('deleteItem')
DlangTokenType.( ('(')
DlangTokenType.ID ('toExecute')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.try ('try')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('toExecute')
DlangTokenType.. ('.')
DlangTokenType.ID ('job')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.catch ('catch')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Exception')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('toExecute')
DlangTokenType.. ('.')
DlangTokenType.ID ('exception')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('atomicSetUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('toExecute')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('deleteItem')
DlangTokenType.( ('(')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('item')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('deleteItemNoSync')
DlangTokenType.( ('(')
DlangTokenType.ID ('item')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('deleteItemNoSync')
DlangTokenType.( ('(')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('item')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
WHITE_SPACE (' ')
DlangTokenType.!= ('!=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('notStarted')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('inProgress')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('item')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.ID ('head')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// Make sure head gets set properly.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('popNoSync')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('item')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.ID ('tail')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tail')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('tail')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('tail')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.ID ('item')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('  ')
DlangTokenType.LINE_COMMENT ('// Check queue consistency.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.ID ('item')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('  ')
DlangTokenType.LINE_COMMENT ('// Check queue consistency.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('item')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('queueMutex')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueMutex')
DlangTokenType.. ('.')
DlangTokenType.ID ('lock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('queueMutex')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueMutex')
DlangTokenType.. ('.')
DlangTokenType.ID ('unlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('waiterLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('waiterMutex')
DlangTokenType.. ('.')
DlangTokenType.ID ('lock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('waiterUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('waiterMutex')
DlangTokenType.. ('.')
DlangTokenType.ID ('unlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('wait')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('workerCondition')
DlangTokenType.. ('.')
DlangTokenType.ID ('wait')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('notify')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('workerCondition')
DlangTokenType.. ('.')
DlangTokenType.ID ('notify')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('notifyAll')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('workerCondition')
DlangTokenType.. ('.')
DlangTokenType.ID ('notifyAll')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('waitUntilCompletion')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('singleTaskThread')
DlangTokenType.. ('.')
DlangTokenType.ID ('join')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('waiterCondition')
DlangTokenType.. ('.')
DlangTokenType.ID ('wait')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('notifyWaiters')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSingleTask')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('waiterCondition')
DlangTokenType.. ('.')
DlangTokenType.ID ('notifyAll')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Private constructor for creating dummy pools that only have one thread,')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// only execute one Task, and then terminate.  This is used for')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// Task.executeInNewThread().')
WHITE_SPACE ('\n    ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.ID ('AbstractTask')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('priority')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
DlangTokenType.. ('.')
DlangTokenType.ID ('max')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.LINE_COMMENT ('// Dummy value, not used.')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('instanceStartIndex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('isSingleTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('inProgress')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('head')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('singleTaskThread')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('doSingleTask')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('singleTaskThread')
DlangTokenType.. ('.')
DlangTokenType.ID ('start')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.LINE_COMMENT ('// Disabled until writing code to support')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// running thread with specified priority')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// See https://d.puremagic.com/issues/show_bug.cgi?id=8960')
WHITE_SPACE ('\n\n        ')
DlangTokenType.BLOCK_COMMENT ('/*if (priority != int.max)\n        {\n            singleTaskThread.priority = priority;\n        }*/')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.public ('public')
DlangTokenType.: (':')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// This is used in parallel_algorithm but is too unstable to document')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// as public API.')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('defaultWorkUnitSize')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('rangeLen')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.const ('const')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('safe')
WHITE_SPACE (' ')
DlangTokenType.pure ('pure')
WHITE_SPACE (' ')
DlangTokenType.nothrow ('nothrow')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('rangeLen')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('eightSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('rangeLen')
WHITE_SPACE (' ')
DlangTokenType./ ('/')
WHITE_SPACE (' ')
DlangTokenType.ID ('eightSize')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.( ('(')
DlangTokenType.ID ('rangeLen')
WHITE_SPACE (' ')
DlangTokenType.% ('%')
WHITE_SPACE (' ')
DlangTokenType.ID ('eightSize')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.? ('?')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('max')
DlangTokenType.( ('(')
DlangTokenType.ID ('ret')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Default constructor that initializes a $(D TaskPool) with\n    $(D totalCPUs) - 1 worker threads.  The minus 1 is included because the\n    main thread will also be available to do work.\n\n    Note:  On single-core machines, the primitives provided by $(D TaskPool)\n           operate transparently in single-threaded mode.\n     */')
WHITE_SPACE ('\n    ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.ID ('totalCPUs')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Allows for custom number of worker threads.\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('nWorkers')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.synchronized ('synchronized')
DlangTokenType.( ('(')
DlangTokenType.typeid ('typeid')
DlangTokenType.( ('(')
DlangTokenType.ID ('TaskPool')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('instanceStartIndex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextInstanceIndex')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// The first worker thread to be initialized will have this index,')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// and will increment it.  The second worker to be initialized will')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// have this index plus 1.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('nextThreadIndex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('instanceStartIndex')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('nextInstanceIndex')
WHITE_SPACE (' ')
DlangTokenType.+= ('+=')
WHITE_SPACE (' ')
DlangTokenType.ID ('nWorkers')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('queueMutex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Mutex')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('waiterMutex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Mutex')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('workerCondition')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Condition')
DlangTokenType.( ('(')
DlangTokenType.ID ('queueMutex')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('waiterCondition')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Condition')
DlangTokenType.( ('(')
DlangTokenType.ID ('waiterMutex')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('ParallelismThread')
DlangTokenType.[ ('[')
DlangTokenType.ID ('nWorkers')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolThread')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('poolThread')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('ParallelismThread')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('startWorkLoop')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('poolThread')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('poolThread')
DlangTokenType.. ('.')
DlangTokenType.ID ('start')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Implements a parallel foreach loop over a range.  This works by implicitly\n    creating and submitting one $(D Task) to the $(D TaskPool) for each worker\n    thread.  A work unit is a set of consecutive elements of $(D range) to\n    be processed by a worker thread between communication with any other\n    thread.  The number of elements processed per work unit is controlled by the\n    $(D workUnitSize) parameter.  Smaller work units provide better load\n    balancing, but larger work units avoid the overhead of communicating\n    with other threads frequently to fetch the next work unit.  Large work\n    units also avoid false sharing in cases where the range is being modified.\n    The less time a single iteration of the loop takes, the larger\n    $(D workUnitSize) should be.  For very expensive loop bodies,\n    $(D workUnitSize) should  be 1.  An overload that chooses a default work\n    unit size is also available.\n\n    Example:\n    ---\n    // Find the logarithm of every number from 1 to\n    // 10_000_000 in parallel.\n    auto logs = new double[10_000_000];\n\n    // Parallel foreach works with or without an index\n    // variable.  It can be iterate by ref if range.front\n    // returns by ref.\n\n    // Iterate over logs using work units of size 100.\n    foreach (i, ref elem; taskPool.parallel(logs, 100))\n    {\n        elem = log(i + 1.0);\n    }\n\n    // Same thing, but use the default work unit size.\n    //\n    // Timings on an Athlon 64 X2 dual core machine:\n    //\n    // Parallel foreach:  388 milliseconds\n    // Regular foreach:   619 milliseconds\n    foreach (i, ref elem; taskPool.parallel(logs))\n    {\n        elem = log(i + 1.0);\n    }\n    ---\n\n    Notes:\n\n    The memory usage of this implementation is guaranteed to be constant\n    in $(D range.length).\n\n    Breaking from a parallel foreach loop via a break, labeled break,\n    labeled continue, return or goto statement throws a\n    $(D ParallelForeachError).\n\n    In the case of non-random access ranges, parallel foreach buffers lazily\n    to an array of size $(D workUnitSize) before executing the parallel portion\n    of the loop.  The exception is that, if a parallel foreach is executed\n    over a range returned by $(D asyncBuf) or $(D map), the copying is elided\n    and the buffers are simply swapped.  In this case $(D workUnitSize) is\n    ignored and the work unit size is set to the  buffer size of $(D range).\n\n    A memory barrier is guaranteed to be executed on exit from the loop,\n    so that results produced by all threads are visible in the calling thread.\n\n    $(B Exception Handling):\n\n    When at least one exception is thrown from inside a parallel foreach loop,\n    the submission of additional $(D Task) objects is terminated as soon as\n    possible, in a non-deterministic manner.  All executing or\n    enqueued work units are allowed to complete.  Then, all exceptions that\n    were thrown by any work unit are chained using $(D Throwable.next) and\n    rethrown.  The order of the exception chaining is non-deterministic.\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('ParallelForeach')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('enforce')
DlangTokenType.( ('(')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"workUnitSize must be > 0."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('RetType')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('ParallelForeach')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('RetType')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n\n    ')
DlangTokenType.LINE_DOC ('/// Ditto')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('ParallelForeach')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasLength')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// Default work unit size is such that we would use 4x as many')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// slots as are in this thread pool.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('defaultWorkUnitSize')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// Just use a really, really dumb guess if the user is too lazy to')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// specify.')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('512')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_DOC ('///')
WHITE_SPACE ('\n    ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('amap')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.... ('...')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.BLOCK_DOC ('/**\n        Eager parallel map.  The eagerness of this function means it has less\n        overhead than the lazily evaluated $(D TaskPool.map) and should be\n        preferred where the memory requirements of eagerness are acceptable.\n        $(D functions) are the functions to be evaluated, passed as template\n        alias parameters in a style similar to\n        $(REF map, std,algorithm,iteration).\n        The first argument must be a random access range. For performance\n        reasons, amap will assume the range elements have not yet been\n        initialized. Elements will be overwritten without calling a destructor\n        nor doing an assignment. As such, the range must not contain meaningful\n        data: either un-initialized objects, or objects in their $(D .init)\n        state.\n\n        ---\n        auto numbers = iota(100_000_000.0);\n\n        // Find the square roots of numbers.\n        //\n        // Timings on an Athlon 64 X2 dual core machine:\n        //\n        // Parallel eager map:                   0.802 s\n        // Equivalent serial implementation:     1.768 s\n        auto squareRoots = taskPool.amap!sqrt(numbers);\n        ---\n\n        Immediately after the range argument, an optional work unit size argument\n        may be provided.  Work units as used by $(D amap) are identical to those\n        defined for parallel foreach.  If no work unit size is provided, the\n        default work unit size is used.\n\n        ---\n        // Same thing, but make work unit size 100.\n        auto squareRoots = taskPool.amap!sqrt(numbers, 100);\n        ---\n\n        An output range for returning the results may be provided as the last\n        argument.  If one is not provided, an array of the proper type will be\n        allocated on the garbage collected heap.  If one is provided, it must be a\n        random access range with assignable elements, must have reference\n        semantics with respect to assignment to its elements, and must have the\n        same length as the input range.  Writing to adjacent elements from\n        different threads must be safe.\n\n        ---\n        // Same thing, but explicitly allocate an array\n        // to return the results in.  The element type\n        // of the array may be either the exact type\n        // returned by functions or an implicit conversion\n        // target.\n        auto squareRoots = new float[numbers.length];\n        taskPool.amap!sqrt(numbers, squareRoots);\n\n        // Multiple functions, explicit output range, and\n        // explicit work unit size.\n        auto results = new Tuple!(float, real)[numbers.length];\n        taskPool.amap!(sqrt, log)(numbers, 100, results);\n        ---\n\n        Note:\n\n        A memory barrier is guaranteed to be executed after all results are written\n        but before returning so that results produced by all threads are visible\n        in the calling thread.\n\n        Tips:\n\n        To perform the mapping operation in place, provide the same range for the\n        input and output range.\n\n        To parallelize the copying of a range with expensive to evaluate elements\n        to an array, pass an identity function (a function that just returns\n        whatever argument is provided to it) to $(D amap).\n\n        $(B Exception Handling):\n\n        When at least one exception is thrown from inside the map functions,\n        the submission of additional $(D Task) objects is terminated as soon as\n        possible, in a non-deterministic manner.  All currently executing or\n        enqueued work units are allowed to complete.  Then, all exceptions that\n        were thrown from any work unit are chained using $(D Throwable.next) and\n        rethrown.  The order of the exception chaining is non-deterministic.\n        */')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('amap')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isRandomAccessRange')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('adjoin')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('staticMap')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('unaryFun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('Args')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('randAssignable')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n                ')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.ID ('MapType')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('ElementType')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('args2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('enforce')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
DlangTokenType., (',')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('text')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Can't use a user supplied buffer that's the wrong "')
DlangTokenType., (',')
WHITE_SPACE ('\n                             ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"size.  (Expected  :"')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('" Got:  "')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('randAssignable')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Wrong buffer type."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('uninitializedArray')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('MapType')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.) (')')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('len')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('args2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('len')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isIntegral')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args2')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('args2')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('args2')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('args2')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('defaultWorkUnitSize')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Handle as a special case:')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('emplaceRef')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
DlangTokenType.[ ('[')
DlangTokenType.ID ('index')
DlangTokenType.++ ('++')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Effectively -1:  chunkIndex + 1 == 0:')
WHITE_SPACE ('\n            ')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitIndex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
DlangTokenType.. ('.')
DlangTokenType.ID ('max')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('shouldContinue')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('doIt')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('failure')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.LINE_COMMENT ('// If an exception is thrown, all threads should bail.')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('atomicStore')
DlangTokenType.( ('(')
DlangTokenType.ID ('shouldContinue')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.while ('while')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('atomicLoad')
DlangTokenType.( ('(')
DlangTokenType.ID ('shouldContinue')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('myUnitIndex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('atomicOp')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"+="')
DlangTokenType.( ('(')
DlangTokenType.ID ('workUnitIndex')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('start')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('myUnitIndex')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('start')
WHITE_SPACE (' ')
DlangTokenType.>= ('>=')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('atomicStore')
DlangTokenType.( ('(')
DlangTokenType.ID ('shouldContinue')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.break ('break')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('end')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('min')
DlangTokenType.( ('(')
DlangTokenType.ID ('len')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('start')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasSlicing')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('subrange')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.[ ('[')
DlangTokenType.ID ('start')
DlangTokenType... ('..')
DlangTokenType.ID ('end')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('start')
DlangTokenType... ('..')
DlangTokenType.ID ('end')
DlangTokenType.) (')')
WHITE_SPACE ('\n                        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                            ')
DlangTokenType.ID ('emplaceRef')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('subrange')
DlangTokenType.. ('.')
DlangTokenType.ID ('front')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                            ')
DlangTokenType.ID ('subrange')
DlangTokenType.. ('.')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('start')
DlangTokenType... ('..')
DlangTokenType.ID ('end')
DlangTokenType.) (')')
WHITE_SPACE ('\n                        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                            ')
DlangTokenType.ID ('emplaceRef')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('submitAndExecute')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('doIt')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_DOC ('///')
WHITE_SPACE ('\n    ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('map')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.... ('...')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.BLOCK_DOC ('/**\n        A semi-lazy parallel map that can be used for pipelining.  The map\n        functions are evaluated for the first $(D bufSize) elements and stored in a\n        buffer and made available to $(D popFront).  Meanwhile, in the\n        background a second buffer of the same size is filled.  When the first\n        buffer is exhausted, it is swapped with the second buffer and filled while\n        the values from what was originally the second buffer are read.  This\n        implementation allows for elements to be written to the buffer without\n        the need for atomic operations or synchronization for each write, and\n        enables the mapping function to be evaluated efficiently in parallel.\n\n        $(D map) has more overhead than the simpler procedure used by $(D amap)\n        but avoids the need to keep all results in memory simultaneously and works\n        with non-random access ranges.\n\n        Params:\n\n        source = The input range to be mapped.  If $(D source) is not random\n        access it will be lazily buffered to an array of size $(D bufSize) before\n        the map function is evaluated.  (For an exception to this rule, see Notes.)\n\n        bufSize = The size of the buffer to store the evaluated elements.\n\n        workUnitSize = The number of elements to evaluate in a single\n        $(D Task).  Must be less than or equal to $(D bufSize), and\n        should be a fraction of $(D bufSize) such that all worker threads can be\n        used.  If the default of size_t.max is used, workUnitSize will be set to\n        the pool-wide default.\n\n        Returns:  An input range representing the results of the map.  This range\n                  has a length iff $(D source) has a length.\n\n        Notes:\n\n        If a range returned by $(D map) or $(D asyncBuf) is used as an input to\n        $(D map), then as an optimization the copying from the output buffer\n        of the first range to the input buffer of the second range is elided, even\n        though the ranges returned by $(D map) and $(D asyncBuf) are non-random\n        access ranges.  This means that the $(D bufSize) parameter passed to the\n        current call to $(D map) will be ignored and the size of the buffer\n        will be the buffer size of $(D source).\n\n        Example:\n        ---\n        // Pipeline reading a file, converting each line\n        // to a number, taking the logarithms of the numbers,\n        // and performing the additions necessary to find\n        // the sum of the logarithms.\n\n        auto lineRange = File("numberList.txt").byLine();\n        auto dupedLines = std.algorithm.map!"a.idup"(lineRange);\n        auto nums = taskPool.map!(to!double)(dupedLines);\n        auto logs = taskPool.map!log10(nums);\n\n        double sum = 0;\n        foreach (elem; logs)\n        {\n            sum += elem;\n        }\n        ---\n\n        $(B Exception Handling):\n\n        Any exceptions thrown while iterating over $(D source)\n        or computing the map function are re-thrown on a call to $(D popFront) or,\n        if thrown during construction, are simply allowed to propagate to the\n        caller.  In the case of exceptions thrown while computing the map function,\n        the exceptions are chained as in $(D TaskPool.amap).\n        */')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('map')
DlangTokenType.( ('(')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('S')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
DlangTokenType.. ('.')
DlangTokenType.ID ('max')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isInputRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('enforce')
DlangTokenType.( ('(')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
DlangTokenType.. ('.')
DlangTokenType.ID ('max')
WHITE_SPACE (' ')
DlangTokenType.|| ('||')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.<= ('<=')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType., (',')
WHITE_SPACE ('\n                    ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Work unit size must be smaller than buffer size."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('adjoin')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('staticMap')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('unaryFun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.final ('final')
WHITE_SPACE (' ')
DlangTokenType.class ('class')
WHITE_SPACE (' ')
DlangTokenType.ID ('Map')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// This is a class because the task needs to be located on the')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// heap and in the non-random access case source needs to be on')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// the heap, too.')
WHITE_SPACE ('\n\n            ')
DlangTokenType.private ('private')
DlangTokenType.: (':')
WHITE_SPACE ('\n                ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufferTrick')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('buf1')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n                ')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('bufPos')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n                ')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('doBufSwap')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('MapType')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('S')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf2')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('S')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('run')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufPos')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('lastTaskWaited')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isRandomAccessRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('FromType')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('S')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('popSource')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.__traits ('__traits')
DlangTokenType.( ('(')
DlangTokenType.ID ('compiles')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('source')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.[ ('[')
DlangTokenType.ID ('min')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType... ('..')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.__traits ('__traits')
DlangTokenType.( ('(')
DlangTokenType.ID ('compiles')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('source')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.[ ('[')
DlangTokenType.ID ('min')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"S must have slicing for Map."')
WHITE_SPACE ('\n                                      ')
DlangTokenType.~ ('~')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"  "')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
WHITE_SPACE (' ')
DlangTokenType.ID ('S')
DlangTokenType.. ('.')
DlangTokenType.ID ('stringof')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('" doesn't."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('bufferTrick')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// Make sure we don't have the buffer recycling overload of')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// asyncBuf.')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                    ')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('source')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('isRoundRobin')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('source')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Cannot execute a parallel map on "')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
WHITE_SPACE ('\n                                  ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"the buffer recycling overload of asyncBuf."')
WHITE_SPACE ('\n                                 ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('FromType')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('buf1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('FromType')
WHITE_SPACE (' ')
DlangTokenType.ID ('from')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.LINE_COMMENT ('// Just swap our input buffer with source's output buffer.')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// No need to copy element by element.')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('FromType')
WHITE_SPACE (' ')
DlangTokenType.ID ('dumpToFrom')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.<= ('<=')
WHITE_SPACE (' ')
DlangTokenType.ID ('from')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('from')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('swap')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('buf1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('from')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.LINE_COMMENT ('// Just in case this source has been popped before')
WHITE_SPACE ('\n                    ')
DlangTokenType.LINE_COMMENT ('// being sent to map:')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('from')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('from')
DlangTokenType.[ ('[')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('bufPos')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('_length')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('_length')
WHITE_SPACE (' ')
DlangTokenType.-= ('-=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('from')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('bufPos')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('doBufSwap')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('from')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('FromType')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('ElementType')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.LINE_COMMENT ('// The temporary array that data is copied to before being')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// mapped.')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('FromType')
WHITE_SPACE (' ')
DlangTokenType.ID ('from')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('FromType')
WHITE_SPACE (' ')
DlangTokenType.ID ('dumpToFrom')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('from')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.for ('for')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('empty')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.ID ('from')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('from')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.++ ('++')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('front')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('from')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('from')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('from')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasLength')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('_length')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.public ('public')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('length')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.const ('const')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('safe')
WHITE_SPACE (' ')
DlangTokenType.pure ('pure')
WHITE_SPACE (' ')
DlangTokenType.nothrow ('nothrow')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('_length')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.ID ('S')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('bufferTrick')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('bufSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('buf2')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isRandomAccessRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('from')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
DlangTokenType.. ('.')
DlangTokenType.ID ('max')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.? ('?')
WHITE_SPACE ('\n                            ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('defaultWorkUnitSize')
DlangTokenType.( ('(')
DlangTokenType.ID ('bufSize')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('source')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasLength')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('_length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('buf1')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('fillBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('submitBuf2')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.LINE_COMMENT ('// The from parameter is a dummy and ignored in the random access')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// case.')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('fillBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isRandomAccessRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('toMap')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('take')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('success')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('popSource')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('toMap')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('dumpToFrom')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('min')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('toMap')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.LINE_COMMENT ('// Handle as a special case:')
WHITE_SPACE ('\n                    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('toMap')
DlangTokenType.) (')')
WHITE_SPACE ('\n                        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                            ')
DlangTokenType.ID ('buf')
DlangTokenType.[ ('[')
DlangTokenType.ID ('index')
DlangTokenType.++ ('++')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.ID ('functions')
DlangTokenType.( ('(')
DlangTokenType.ID ('toMap')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('submitBuf2')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.in ('in')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE (' ')
DlangTokenType.do ('do')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.LINE_COMMENT ('// Hack to reuse the task object.')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('nextBufTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.) (')')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('fillBuf')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf2')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('doBufSwap')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('lastTaskWaited')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.LINE_COMMENT ('// Then the source is empty.  Signal it here.')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('buf1')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('buf2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isRandomAccessRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n                        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                            ')
DlangTokenType.ID ('from')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                        ')
DlangTokenType.return ('return')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('buf2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('buf1')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('bufPos')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('empty')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('lastTaskWaited')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('submitBuf2')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.public ('public')
DlangTokenType.: (':')
WHITE_SPACE ('\n                ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('front')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType.[ ('[')
DlangTokenType.ID ('bufPos')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasLength')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('_length')
DlangTokenType.-- ('--')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.ID ('bufPos')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('bufPos')
WHITE_SPACE (' ')
DlangTokenType.>= ('>=')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('doBufSwap')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('isInfinite')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.LINE_COMMENT ('// popFront() sets this when source is empty')
WHITE_SPACE ('\n                        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Map')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Given a $(D source) range that is expensive to iterate over, returns an\n    input range that asynchronously buffers the contents of\n    $(D source) into a buffer of $(D bufSize) elements in a worker thread,\n    while making previously buffered elements from a second buffer, also of size\n    $(D bufSize), available via the range interface of the returned\n    object.  The returned range has a length iff $(D hasLength!S).\n    $(D asyncBuf) is useful, for example, when performing expensive operations\n    on the elements of ranges that represent data on a disk or network.\n\n    Example:\n    ---\n    import std.conv, std.stdio;\n\n    void main()\n    {\n        // Fetch lines of a file in a background thread\n        // while processing previously fetched lines,\n        // dealing with byLine's buffer recycling by\n        // eagerly duplicating every line.\n        auto lines = File("foo.txt").byLine();\n        auto duped = std.algorithm.map!"a.idup"(lines);\n\n        // Fetch more lines in the background while we\n        // process the lines already read into memory\n        // into a matrix of doubles.\n        double[][] matrix;\n        auto asyncReader = taskPool.asyncBuf(duped);\n\n        foreach (line; asyncReader)\n        {\n            auto ls = line.split("\t");\n            matrix ~= to!(double[])(ls);\n        }\n    }\n    ---\n\n    $(B Exception Handling):\n\n    Any exceptions thrown while iterating over $(D source) are re-thrown on a\n    call to $(D popFront) or, if thrown during construction, simply\n    allowed to propagate to the caller.\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('asyncBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('S')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isInputRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.final ('final')
WHITE_SPACE (' ')
DlangTokenType.class ('class')
WHITE_SPACE (' ')
DlangTokenType.ID ('AsyncBuf')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// This is a class because the task and source both need to be on')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// the heap.')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// The element type of S.')
WHITE_SPACE ('\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('ElementType')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.; (';')
WHITE_SPACE ('  ')
DlangTokenType.LINE_COMMENT ('// Needs to be here b/c of forward ref bugs.')
WHITE_SPACE ('\n\n        ')
DlangTokenType.private ('private')
DlangTokenType.: (':')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf2')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('S')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('run')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufPos')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('lastTaskWaited')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasLength')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('_length')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.LINE_COMMENT ('// Available if hasLength!S.')
WHITE_SPACE ('\n                ')
DlangTokenType.public ('public')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('length')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.const ('const')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('safe')
WHITE_SPACE (' ')
DlangTokenType.pure ('pure')
WHITE_SPACE (' ')
DlangTokenType.nothrow ('nothrow')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('_length')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.ID ('S')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('buf2')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('source')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasLength')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('_length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('buf1')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('fillBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('submitBuf2')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('fillBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.for ('for')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('empty')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('buf')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.++ ('++')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('front')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('submitBuf2')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.in ('in')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE (' ')
DlangTokenType.do ('do')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// Hack to reuse the task object.')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('nextBufTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.) (')')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('fillBuf')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf2')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('doBufSwap')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('lastTaskWaited')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.LINE_COMMENT ('// Then source is empty.  Signal it here.')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('buf1')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('buf2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('buf2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('buf1')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextBufTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('bufPos')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType.. ('.')
DlangTokenType.ID ('empty')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('lastTaskWaited')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('submitBuf2')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.public ('public')
DlangTokenType.: (':')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('E')
WHITE_SPACE (' ')
DlangTokenType.ID ('front')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType.[ ('[')
DlangTokenType.ID ('bufPos')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasLength')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('_length')
DlangTokenType.-- ('--')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('bufPos')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('bufPos')
WHITE_SPACE (' ')
DlangTokenType.>= ('>=')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('doBufSwap')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('isInfinite')
DlangTokenType.! ('!')
DlangTokenType.ID ('S')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_DOC ('///')
WHITE_SPACE ('\n                ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.LINE_COMMENT ('// popFront() sets this when source is empty:')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('AsyncBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('source')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufSize')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Given a callable object $(D next) that writes to a user-provided buffer and\n    a second callable object $(D empty) that determines whether more data is\n    available to write via $(D next), returns an input range that\n    asynchronously calls $(D next) with a set of size $(D nBuffers) of buffers\n    and makes the results available in the order they were obtained via the\n    input range interface of the returned object.  Similarly to the\n    input range overload of $(D asyncBuf), the first half of the buffers\n    are made available via the range interface while the second half are\n    filled and vice-versa.\n\n    Params:\n\n    next = A callable object that takes a single argument that must be an array\n           with mutable elements.  When called, $(D next) writes data to\n           the array provided by the caller.\n\n    empty = A callable object that takes no arguments and returns a type\n            implicitly convertible to $(D bool).  This is used to signify\n            that no more data is available to be obtained by calling $(D next).\n\n    initialBufSize = The initial size of each buffer.  If $(D next) takes its\n                     array by reference, it may resize the buffers.\n\n    nBuffers = The number of buffers to cycle through when calling $(D next).\n\n    Example:\n    ---\n    // Fetch lines of a file in a background\n    // thread while processing previously fetched\n    // lines, without duplicating any lines.\n    auto file = File("foo.txt");\n\n    void next(ref char[] buf)\n    {\n        file.readln(buf);\n    }\n\n    // Fetch more lines in the background while we\n    // process the lines already read into memory\n    // into a matrix of doubles.\n    double[][] matrix;\n    auto asyncReader = taskPool.asyncBuf(&next, &file.eof);\n\n    foreach (line; asyncReader)\n    {\n        auto ls = line.split("\t");\n        matrix ~= to!(double[])(ls);\n    }\n    ---\n\n    $(B Exception Handling):\n\n    Any exceptions thrown while iterating over $(D range) are re-thrown on a\n    call to $(D popFront).\n\n    Warning:\n\n    Using the range returned by this function in a parallel foreach loop\n    will not work because buffers may be overwritten while the task that\n    processes them is in queue.  This is checked for at compile time\n    and will result in a static assertion failure.\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('asyncBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('C1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('C2')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('C1')
WHITE_SPACE (' ')
DlangTokenType.ID ('next')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('C2')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('initialBufSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('nBuffers')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('C2')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('Parameters')
DlangTokenType.! ('!')
DlangTokenType.ID ('C1')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('Parameters')
DlangTokenType.! ('!')
DlangTokenType.ID ('C2')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('isArray')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Parameters')
DlangTokenType.! ('!')
DlangTokenType.ID ('C1')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('roundRobin')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('RoundRobinBuffer')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('C1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('C2')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('next')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('initialBufSize')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('nBuffers')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('asyncBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('roundRobin')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('nBuffers')
WHITE_SPACE (' ')
DlangTokenType./ ('/')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_DOC ('///')
WHITE_SPACE ('\n    ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduce')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.... ('...')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.BLOCK_DOC ('/**\n        Parallel reduce on a random access range.  Except as otherwise noted,\n        usage is similar to $(REF _reduce, std,algorithm,iteration).  This\n        function works by splitting the range to be reduced into work units,\n        which are slices to be reduced in parallel.  Once the results from all\n        work units are computed, a final serial reduction is performed on these\n        results to compute the final answer. Therefore, care must be taken to\n        choose the seed value appropriately.\n\n        Because the reduction is being performed in parallel, $(D functions)\n        must be associative.  For notational simplicity, let # be an\n        infix operator representing $(D functions).  Then, (a # b) # c must equal\n        a # (b # c).  Floating point addition is not associative\n        even though addition in exact arithmetic is.  Summing floating\n        point numbers using this function may give different results than summing\n        serially.  However, for many practical purposes floating point addition\n        can be treated as associative.\n\n        Note that, since $(D functions) are assumed to be associative,\n        additional optimizations are made to the serial portion of the reduction\n        algorithm. These take advantage of the instruction level parallelism of\n        modern CPUs, in addition to the thread-level parallelism that the rest\n        of this module exploits.  This can lead to better than linear speedups\n        relative to $(REF _reduce, std,algorithm,iteration), especially for\n        fine-grained benchmarks like dot products.\n\n        An explicit seed may be provided as the first argument.  If\n        provided, it is used as the seed for all work units and for the final\n        reduction of results from all work units.  Therefore, if it is not the\n        identity value for the operation being performed, results may differ\n        from those generated by $(REF _reduce, std,algorithm,iteration) or\n        depending on how many work units are used.  The next argument must be\n        the range to be reduced.\n        ---\n        // Find the sum of squares of a range in parallel, using\n        // an explicit seed.\n        //\n        // Timings on an Athlon 64 X2 dual core machine:\n        //\n        // Parallel reduce:                     72 milliseconds\n        // Using std.algorithm.reduce instead:  181 milliseconds\n        auto nums = iota(10_000_000.0f);\n        auto sumSquares = taskPool.reduce!"a + b"(\n            0.0, std.algorithm.map!"a * a"(nums)\n        );\n        ---\n\n        If no explicit seed is provided, the first element of each work unit\n        is used as a seed.  For the final reduction, the result from the first\n        work unit is used as the seed.\n        ---\n        // Find the sum of a range in parallel, using the first\n        // element of each work unit as the seed.\n        auto sum = taskPool.reduce!"a + b"(nums);\n        ---\n\n        An explicit work unit size may be specified as the last argument.\n        Specifying too small a work unit size will effectively serialize the\n        reduction, as the final reduction of the result of each work unit will\n        dominate computation time.  If $(D TaskPool.size) for this instance\n        is zero, this parameter is ignored and one work unit is used.\n        ---\n        // Use a work unit size of 100.\n        auto sum2 = taskPool.reduce!"a + b"(nums, 100);\n\n        // Work unit size of 100 and explicit seed.\n        auto sum3 = taskPool.reduce!"a + b"(0.0, nums, 100);\n        ---\n\n        Parallel reduce supports multiple functions, like\n        $(D std.algorithm.reduce).\n        ---\n        // Find both the min and max of nums.\n        auto minMax = taskPool.reduce!(min, max)(nums);\n        assert(minMax[0] == reduce!min(nums));\n        assert(minMax[1] == reduce!max(nums));\n        ---\n\n        $(B Exception Handling):\n\n        After this function is finished executing, any exceptions thrown\n        are chained together via $(D Throwable.next) and rethrown.  The chaining\n        order is non-deterministic.\n         */')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduce')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceAdjoin')
DlangTokenType.! ('!')
DlangTokenType.ID ('functions')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('finishFun')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceFinish')
DlangTokenType.! ('!')
DlangTokenType.ID ('functions')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isIntegral')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('args2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('args2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('makeStartValue')
DlangTokenType.( ('(')
DlangTokenType.ID ('Type')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('Type')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('functions')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('adjoin')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('staticMap')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('binaryFun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('functions')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('e')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('seed')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('seed')
DlangTokenType.. ('.')
DlangTokenType.ID ('Types')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('emplaceRef')
DlangTokenType.( ('(')
DlangTokenType.ID ('seed')
DlangTokenType.. ('.')
DlangTokenType.ID ('expand')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('seed')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('args2')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('isInputRange')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('Args2')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args2')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('seed')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args2')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('explicitSeed')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('defaultWorkUnitSize')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('args2')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('args2')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('defaultWorkUnitSize')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('enforce')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('empty')
DlangTokenType., (',')
WHITE_SPACE ('\n                    ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Cannot reduce an empty range with first element as start value."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('seed')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('makeStartValue')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('front')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('explicitSeed')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('seed')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('E')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceOnRange')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('lowerBound')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('upperBound')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// This is for exploiting instruction level parallelism by')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// using multiple accumulator variables within each thread,')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// since we're assuming functions are associative anyhow.')
WHITE_SPACE ('\n\n                ')
DlangTokenType.LINE_COMMENT ('// This is so that loops can be unrolled automatically.')
WHITE_SPACE ('\n                ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('ilpTuple')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('AliasSeq')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('nILP')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('ilpTuple')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('subSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('upperBound')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.ID ('lowerBound')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType./ ('/')
WHITE_SPACE (' ')
DlangTokenType.ID ('nILP')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('subSize')
WHITE_SPACE (' ')
DlangTokenType.<= ('<=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.LINE_COMMENT ('// Handle as a special case.')
WHITE_SPACE ('\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('explicitSeed')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('E')
WHITE_SPACE (' ')
DlangTokenType.ID ('result')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('seed')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('E')
WHITE_SPACE (' ')
DlangTokenType.ID ('result')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('makeStartValue')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.[ ('[')
DlangTokenType.ID ('lowerBound')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('lowerBound')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('lowerBound')
DlangTokenType... ('..')
DlangTokenType.ID ('upperBound')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('result')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('result')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('result')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('subSize')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('E')
DlangTokenType.[ ('[')
DlangTokenType.ID ('nILP')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('results')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('size_t')
DlangTokenType.[ ('[')
DlangTokenType.ID ('nILP')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('offsets')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('ilpTuple')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('offsets')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('lowerBound')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('subSize')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('explicitSeed')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('seed')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('makeStartValue')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.[ ('[')
DlangTokenType.ID ('offsets')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('offsets')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('nLoop')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('subSize')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('explicitSeed')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('nLoop')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('j')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('ilpTuple')
DlangTokenType.) (')')
WHITE_SPACE ('\n                    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.ID ('j')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.ID ('j')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.[ ('[')
DlangTokenType.ID ('offsets')
DlangTokenType.[ ('[')
DlangTokenType.ID ('j')
DlangTokenType.] (']')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                        ')
DlangTokenType.ID ('offsets')
DlangTokenType.[ ('[')
DlangTokenType.ID ('j')
DlangTokenType.] (']')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.LINE_COMMENT ('// Finish the remainder.')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('nILP')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('subSize')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('lowerBound')
DlangTokenType... ('..')
DlangTokenType.ID ('upperBound')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType.( ('(')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('ilpTuple')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('finishFun')
DlangTokenType.( ('(')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('results')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('len')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('seed')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('finishFun')
DlangTokenType.( ('(')
DlangTokenType.ID ('seed')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceOnRange')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Unlike the rest of the functions here, I can't use the Task object')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// recycling trick here because this has to work on non-commutative')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// operations.  After all the tasks are done executing, fun() has to')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// be applied on the results of these to get a final result, but')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// it can't be evaluated out of order.')
WHITE_SPACE ('\n\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('nWorkUnits')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('len')
WHITE_SPACE (' ')
DlangTokenType./ ('/')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.( ('(')
DlangTokenType.ID ('len')
WHITE_SPACE (' ')
DlangTokenType.% ('%')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.? ('?')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nWorkUnits')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
WHITE_SPACE (' ')
DlangTokenType.>= ('>=')
WHITE_SPACE (' ')
DlangTokenType.ID ('len')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('RTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('run')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('reduceOnRange')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('R')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('RTask')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Can't use alloca() due to Bug 3753.  Use a fixed buffer')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// backed by malloc().')
WHITE_SPACE ('\n            ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('maxStack')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2_048')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.byte ('byte')
DlangTokenType.[ ('[')
DlangTokenType.ID ('maxStack')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('nBytesNeeded')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('nWorkUnits')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('RTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('sizeof')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('stdc')
DlangTokenType.. ('.')
DlangTokenType.ID ('stdlib')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('malloc')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('free')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('nBytesNeeded')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.ID ('maxStack')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('tasks')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('RTask')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.. ('.')
DlangTokenType.ID ('ptr')
DlangTokenType.) (')')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('nWorkUnits')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('ptr')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('RTask')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('malloc')
DlangTokenType.( ('(')
DlangTokenType.ID ('nBytesNeeded')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('ptr')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('OutOfMemoryError')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                        ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Out of memory in std.parallelism."')
WHITE_SPACE ('\n                    ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('tasks')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('ptr')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('nWorkUnits')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('nBytesNeeded')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.ID ('maxStack')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('free')
DlangTokenType.( ('(')
DlangTokenType.ID ('tasks')
DlangTokenType.. ('.')
DlangTokenType.ID ('ptr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('t')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('emplaceRef')
DlangTokenType.( ('(')
DlangTokenType.ID ('t')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('RTask')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Hack to take the address of a nested function w/o')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// making a closure.')
WHITE_SPACE ('\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedAddress')
DlangTokenType.( ('(')
DlangTokenType.ID ('D')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.scope ('scope')
WHITE_SPACE (' ')
DlangTokenType.ID ('D')
WHITE_SPACE (' ')
DlangTokenType.ID ('del')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('system')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('tmp')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('del')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('tmp')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('curPos')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('useTask')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('RTask')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedAddress')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('reduceOnRange')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('min')
DlangTokenType.( ('(')
DlangTokenType.ID ('len')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('curPos')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('  ')
DlangTokenType.LINE_COMMENT ('// upper bound.')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.; (';')
WHITE_SPACE ('  ')
DlangTokenType.LINE_COMMENT ('// range')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('_args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('curPos')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.LINE_COMMENT ('// lower bound.')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('curPos')
WHITE_SPACE (' ')
DlangTokenType.+= ('+=')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('useTask')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType... ('..')
DlangTokenType.ID ('tasks')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('tasks')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ID ('abstractPutGroupNoSync')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType., (',')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
WHITE_SPACE ('\n                ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('tasks')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.try ('try')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('job')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.catch ('catch')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('exception')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.LINE_COMMENT ('// Try to execute each of these in the current thread')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('tryDeleteExecute')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Now that we've tried to execute every task, they're all either')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// done or in progress.  Force all of them.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('E')
WHITE_SPACE (' ')
DlangTokenType.ID ('result')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('seed')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('firstException')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('lastException')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.try ('try')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.catch ('catch')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('addToChain')
DlangTokenType.( ('(')
DlangTokenType.ID ('e')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('firstException')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('lastException')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.continue ('continue')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('firstException')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('result')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('finishFun')
DlangTokenType.( ('(')
DlangTokenType.ID ('result')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('returnVal')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('firstException')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.ID ('firstException')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('result')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Gets the index of the current thread relative to this $(D TaskPool).  Any\n    thread not in this pool will receive an index of 0.  The worker threads in\n    this pool receive unique indices of 1 through $(D this.size).\n\n    This function is useful for maintaining worker-local resources.\n\n    Example:\n    ---\n    // Execute a loop that computes the greatest common\n    // divisor of every number from 0 through 999 with\n    // 42 in parallel.  Write the results out to\n    // a set of files, one for each thread.  This allows\n    // results to be written out without any synchronization.\n\n    import std.conv, std.range, std.numeric, std.stdio;\n\n    void main()\n    {\n        auto filesHandles = new File[taskPool.size + 1];\n        scope(exit) {\n            foreach (ref handle; fileHandles)\n            {\n                handle.close();\n            }\n        }\n\n        foreach (i, ref handle; fileHandles)\n        {\n            handle = File("workerResults" ~ to!string(i) ~ ".txt");\n        }\n\n        foreach (num; parallel(iota(1_000)))\n        {\n            auto outHandle = fileHandles[taskPool.workerIndex];\n            outHandle.writeln(num, '\t', gcd(num, 42));\n        }\n    }\n    ---\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workerIndex')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('safe')
WHITE_SPACE (' ')
DlangTokenType.const ('const')
WHITE_SPACE (' ')
DlangTokenType.nothrow ('nothrow')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('rawInd')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('threadIndex')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('rawInd')
WHITE_SPACE (' ')
DlangTokenType.>= ('>=')
WHITE_SPACE (' ')
DlangTokenType.ID ('instanceStartIndex')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('rawInd')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.ID ('instanceStartIndex')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('size')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.? ('?')
WHITE_SPACE ('\n                ')
DlangTokenType.( ('(')
DlangTokenType.ID ('rawInd')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.ID ('instanceStartIndex')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Struct for creating worker-local storage.  Worker-local storage is\n    thread-local storage that exists only for worker threads in a given\n    $(D TaskPool) plus a single thread outside the pool.  It is allocated on the\n    garbage collected heap in a way that avoids _false sharing, and doesn't\n    necessarily have global scope within any thread.  It can be accessed from\n    any worker thread in the $(D TaskPool) that created it, and one thread\n    outside this $(D TaskPool).  All threads outside the pool that created a\n    given instance of worker-local storage share a single slot.\n\n    Since the underlying data for this struct is heap-allocated, this struct\n    has reference semantics when passed between functions.\n\n    The main uses cases for $(D WorkerLocalStorageStorage) are:\n\n    1.  Performing parallel reductions with an imperative, as opposed to\n    functional, programming style.  In this case, it's useful to treat\n    $(D WorkerLocalStorageStorage) as local to each thread for only the parallel\n    portion of an algorithm.\n\n    2.  Recycling temporary buffers across iterations of a parallel foreach loop.\n\n    Example:\n    ---\n    // Calculate pi as in our synopsis example, but\n    // use an imperative instead of a functional style.\n    immutable n = 1_000_000_000;\n    immutable delta = 1.0L / n;\n\n    auto sums = taskPool.workerLocalStorage(0.0L);\n    foreach (i; parallel(iota(n)))\n    {\n        immutable x = ( i - 0.5L ) * delta;\n        immutable toAdd = delta / ( 1.0 + x * x );\n        sums.get += toAdd;\n    }\n\n    // Add up the results from each worker thread.\n    real pi = 0;\n    foreach (threadResult; sums.toRange)\n    {\n        pi += 4.0L * threadResult;\n    }\n    ---\n     */')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.struct ('struct')
WHITE_SPACE (' ')
DlangTokenType.ID ('WorkerLocalStorage')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.private ('private')
DlangTokenType.: (':')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('size')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('elemSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.bool ('bool')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('stillThreadLocal')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('roundToLine')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('num')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.pure ('pure')
WHITE_SPACE (' ')
DlangTokenType.nothrow ('nothrow')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('num')
WHITE_SPACE (' ')
DlangTokenType.% ('%')
WHITE_SPACE (' ')
DlangTokenType.ID ('cacheLineSize')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('num')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.( ('(')
DlangTokenType.ID ('num')
WHITE_SPACE (' ')
DlangTokenType./ ('/')
WHITE_SPACE (' ')
DlangTokenType.ID ('cacheLineSize')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('cacheLineSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.void ('void')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('data')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('initialize')
DlangTokenType.( ('(')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('stillThreadLocal')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.* ('*')
DlangTokenType.ID ('stillThreadLocal')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Determines whether the GC should scan the array.')
WHITE_SPACE ('\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('blkInfo')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.typeid ('typeid')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
DlangTokenType.. ('.')
DlangTokenType.ID ('flags')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.? ('?')
WHITE_SPACE ('\n                           ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('GC')
DlangTokenType.. ('.')
DlangTokenType.ID ('BlkAttr')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE ('\n                           ')
DlangTokenType.ID ('GC')
DlangTokenType.. ('.')
DlangTokenType.ID ('BlkAttr')
DlangTokenType.. ('.')
DlangTokenType.ID ('NO_SCAN')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('nElem')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('elemSize')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('roundToLine')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.. ('.')
DlangTokenType.ID ('sizeof')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// The + 3 is to pad one full cache line worth of space on either side')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// of the data structure to make sure false sharing with completely')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// unrelated heap data is prevented, and to provide enough padding to')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// make sure that data is cache line-aligned.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('data')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('GC')
DlangTokenType.. ('.')
DlangTokenType.ID ('malloc')
DlangTokenType.( ('(')
DlangTokenType.ID ('elemSize')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('nElem')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('blkInfo')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('elemSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Cache line align data ptr.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('data')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.void ('void')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('roundToLine')
DlangTokenType.( ('(')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('data')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('nElem')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('opIndex')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('opIndex')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.ID ('size')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('text')
DlangTokenType.( ('(')
DlangTokenType.ID ('index')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.CHARACTER_LITERAL (''\t'')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
DlangTokenType.. ('.')
DlangTokenType.ID ('max')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
DlangTokenType.( ('(')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('data')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('elemSize')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('opIndexAssign')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('val')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.ID ('size')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.* ('*')
DlangTokenType.( ('(')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('data')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('elemSize')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('val')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.public ('public')
DlangTokenType.: (':')
WHITE_SPACE ('\n        ')
DlangTokenType.BLOCK_DOC ('/**\n        Get the current thread's instance.  Returns by ref.\n        Note that calling $(D get) from any thread\n        outside the $(D TaskPool) that created this instance will return the\n        same reference, so an instance of worker-local storage should only be\n        accessed from one thread outside the pool that created it.  If this\n        rule is violated, undefined behavior will result.\n\n        If assertions are enabled and $(D toRange) has been called, then this\n        WorkerLocalStorage instance is no longer worker-local and an assertion\n        failure will result when calling this method.  This is not checked\n        when assertions are disabled for performance reasons.\n         */')
WHITE_SPACE ('\n        ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('get')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.* ('*')
DlangTokenType.ID ('stillThreadLocal')
DlangTokenType., (',')
WHITE_SPACE ('\n                ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Cannot call get() on this instance of WorkerLocalStorage "')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
WHITE_SPACE ('\n                ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"because it is no longer worker-local."')
WHITE_SPACE ('\n            ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('opIndex')
DlangTokenType.( ('(')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('workerIndex')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.BLOCK_DOC ('/**\n        Assign a value to the current thread's instance.  This function has\n        the same caveats as its overload.\n        */')
WHITE_SPACE ('\n        ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('get')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('val')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.* ('*')
DlangTokenType.ID ('stillThreadLocal')
DlangTokenType., (',')
WHITE_SPACE ('\n                ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Cannot call get() on this instance of WorkerLocalStorage "')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
WHITE_SPACE ('\n                ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"because it is no longer worker-local."')
WHITE_SPACE ('\n            ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('opIndexAssign')
DlangTokenType.( ('(')
DlangTokenType.ID ('val')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('workerIndex')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.BLOCK_DOC ('/**\n        Returns a range view of the values for all threads, which can be used\n        to further process the results of each thread after running the parallel\n        part of your algorithm.  Do not use this method in the parallel portion\n        of your algorithm.\n\n        Calling this function sets a flag indicating that this struct is no\n        longer worker-local, and attempting to use the $(D get) method again\n        will result in an assertion failure if assertions are enabled.\n         */')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('WorkerLocalStorageRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('toRange')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.* ('*')
DlangTokenType.ID ('stillThreadLocal')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.* ('*')
DlangTokenType.ID ('stillThreadLocal')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.LINE_COMMENT ('// Make absolutely sure results are visible to all threads.')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// This is probably not necessary since some other')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// synchronization primitive will be used to signal that the')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// parallel part of the algorithm is done, but the')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// performance impact should be negligible, so it's better')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// to be safe.')
WHITE_SPACE ('\n                ')
DlangTokenType.ubyte ('ubyte')
WHITE_SPACE (' ')
DlangTokenType.ID ('barrierDummy')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('atomicSetUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('barrierDummy')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('WorkerLocalStorageRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('T')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Range primitives for worker-local storage.  The purpose of this is to\n    access results produced by each worker thread from a single thread once you\n    are no longer using the worker-local storage from multiple threads.\n    Do not use this struct in the parallel portion of your algorithm.\n\n    The proper way to instantiate this object is to call\n    $(D WorkerLocalStorage.toRange).  Once instantiated, this object behaves\n    as a finite random-access range with assignable, lvalue elements and\n    a length equal to the number of worker threads in the $(D TaskPool) that\n    created it plus 1.\n     */')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.struct ('struct')
WHITE_SPACE (' ')
DlangTokenType.ID ('WorkerLocalStorageRange')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.private ('private')
DlangTokenType.: (':')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('WorkerLocalStorage')
DlangTokenType.! ('!')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('workerLocalStorage')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('_length')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('beginOffset')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.ID ('WorkerLocalStorage')
DlangTokenType.! ('!')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('wl')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('workerLocalStorage')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('wl')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('_length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('wl')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.public ('public')
DlangTokenType.: (':')
WHITE_SPACE ('\n        ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('front')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('back')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.[ ('[')
DlangTokenType.ID ('_length')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('_length')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('beginOffset')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('_length')
DlangTokenType.-- ('--')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('popBack')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('_length')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('_length')
DlangTokenType.-- ('--')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('save')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('opIndex')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.ID ('_length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('workerLocalStorage')
DlangTokenType.[ ('[')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('beginOffset')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('opIndexAssign')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('val')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.ID ('_length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('workerLocalStorage')
DlangTokenType.[ ('[')
DlangTokenType.ID ('index')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('val')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('opSlice')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('lower')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('upper')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('upper')
WHITE_SPACE (' ')
DlangTokenType.<= ('<=')
WHITE_SPACE (' ')
DlangTokenType.ID ('_length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('newWl')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('workerLocalStorage')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('newWl')
DlangTokenType.. ('.')
DlangTokenType.ID ('data')
WHITE_SPACE (' ')
DlangTokenType.+= ('+=')
WHITE_SPACE (' ')
DlangTokenType.ID ('lower')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('newWl')
DlangTokenType.. ('.')
DlangTokenType.ID ('elemSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('newWl')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('upper')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.ID ('lower')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('newWl')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('length')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('_length')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Creates an instance of worker-local storage, initialized with a given\n    value.  The value is $(D lazy) so that you can, for example, easily\n    create one instance of a class for each worker.  For usage example,\n    see the $(D WorkerLocalStorage) struct.\n     */')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('WorkerLocalStorage')
DlangTokenType.! ('!')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('workerLocalStorage')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.lazy ('lazy')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('initialVal')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('WorkerLocalStorage')
DlangTokenType.! ('!')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('ret')
DlangTokenType.. ('.')
DlangTokenType.ID ('initialize')
DlangTokenType.( ('(')
DlangTokenType.this ('this')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('ret')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('initialVal')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.LINE_COMMENT ('// Memory barrier to make absolutely sure that what we wrote is')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// visible to worker threads.')
WHITE_SPACE ('\n        ')
DlangTokenType.ubyte ('ubyte')
WHITE_SPACE (' ')
DlangTokenType.ID ('barrierDummy')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('atomicSetUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('barrierDummy')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('ret')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Signals to all worker threads to terminate as soon as they are finished\n    with their current $(D Task), or immediately if they are not executing a\n    $(D Task).  $(D Task)s that were in queue will not be executed unless\n    a call to $(D Task.workForce), $(D Task.yieldForce) or $(D Task.spinForce)\n    causes them to be executed.\n\n    Use only if you have waited on every $(D Task) and therefore know the\n    queue is empty, or if you speculatively executed some tasks and no longer\n    need the results.\n     */')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('stop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('atomicSetUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('status')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('stopNow')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('notifyAll')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Signals worker threads to terminate when the queue becomes empty.\n\n    If blocking argument is true, wait for all worker threads to terminate\n    before returning.  This option might be used in applications where\n    task results are never consumed-- e.g. when $(D TaskPool) is employed as a\n    rudimentary scheduler for tasks which communicate by means other than\n    return values.\n\n    Warning:  Calling this function with $(D blocking = true) from a worker\n              thread that is a member of the same $(D TaskPool) that\n              $(D finish) is being called on will result in a deadlock.\n     */')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('finish')
DlangTokenType.( ('(')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('blocking')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('atomicCasUbyte')
DlangTokenType.( ('(')
DlangTokenType.ID ('status')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('running')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('finishing')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('notifyAll')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('blocking')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// Use this thread as a worker until everything is finished.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('executeWorkLoop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('t')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// Maybe there should be something here to prevent a thread')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// from calling join() on itself if this function is called')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// from a worker thread in the same pool, but:')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('//')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// 1.  Using an if statement to skip join() would result in')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('//     finish() returning without all tasks being finished.')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('//')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// 2.  If an exception were thrown, it would bubble up to the')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('//     Task from which finish() was called and likely be')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('//     swallowed.')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('t')
DlangTokenType.. ('.')
DlangTokenType.ID ('join')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_DOC ('/// Returns the number of worker threads in the pool.')
WHITE_SPACE ('\n    ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('size')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('safe')
WHITE_SPACE (' ')
DlangTokenType.const ('const')
WHITE_SPACE (' ')
DlangTokenType.pure ('pure')
WHITE_SPACE (' ')
DlangTokenType.nothrow ('nothrow')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    Put a $(D Task) object on the back of the task queue.  The $(D Task)\n    object may be passed by pointer or reference.\n\n    Example:\n    ---\n    import std.file;\n\n    // Create a task.\n    auto t = task!read("foo.txt");\n\n    // Add it to the queue to be executed.\n    taskPool.put(t);\n    ---\n\n    Notes:\n\n    @trusted overloads of this function are called for $(D Task)s if\n    $(REF hasUnsharedAliasing, std,traits) is false for the $(D Task)'s\n    return type or the function the $(D Task) executes is $(D pure).\n    $(D Task) objects that meet all other requirements specified in the\n    $(D @trusted) overloads of $(D task) and $(D scopedTask) may be created\n    and executed from $(D @safe) code via $(D Task.executeInNewThread) but\n    not via $(D TaskPool).\n\n    While this function takes the address of variables that may\n    be on the stack, some overloads are marked as @trusted.\n    $(D Task) includes a destructor that waits for the task to complete\n    before destroying the stack frame it is allocated on.  Therefore,\n    it is impossible for the stack frame to be destroyed before the task is\n    complete and no longer referenced by a $(D TaskPool).\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSafeReturn')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('abstractPut')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_DOC ('/// Ditto')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('isSafeReturn')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.* ('*')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('enforce')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Cannot put a null Task on a TaskPool queue."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.* ('*')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isSafeReturn')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('abstractPut')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.... ('...')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('Task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('fun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Args')
DlangTokenType.) (')')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('isSafeReturn')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.* ('*')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('enforce')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
WHITE_SPACE (' ')
DlangTokenType.! ('!')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Cannot put a null Task on a TaskPool queue."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.* ('*')
DlangTokenType.ID ('task')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    These properties control whether the worker threads are daemon threads.\n    A daemon thread is automatically terminated when all non-daemon threads\n    have terminated.  A non-daemon thread will prevent a program from\n    terminating as long as it has not terminated.\n\n    If any $(D TaskPool) with non-daemon threads is active, either $(D stop)\n    or $(D finish) must be called on it before the program can terminate.\n\n    The worker treads in the $(D TaskPool) instance returned by the\n    $(D taskPool) property are daemon by default.  The worker threads of\n    manually instantiated task pools are non-daemon by default.\n\n    Note:  For a size zero pool, the getter arbitrarily returns true and the\n           setter has no effect.\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('isDaemon')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.? ('?')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('isDaemon')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_DOC ('/// Ditto')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('isDaemon')
DlangTokenType.( ('(')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('newVal')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('thread')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('isDaemon')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('newVal')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.BLOCK_DOC ('/**\n    These functions allow getting and setting the OS scheduling priority of\n    the worker threads in this $(D TaskPool).  They forward to\n    $(D core.thread.Thread.priority), so a given priority value here means the\n    same thing as an identical priority value in $(D core.thread).\n\n    Note:  For a size zero pool, the getter arbitrarily returns\n           $(D core.thread.Thread.PRIORITY_MIN) and the setter has no effect.\n    */')
WHITE_SPACE ('\n    ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('priority')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.? ('?')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('PRIORITY_MIN')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('priority')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_DOC ('/// Ditto')
WHITE_SPACE ('\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('priority')
DlangTokenType.( ('(')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('newPriority')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('t')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('t')
DlangTokenType.. ('.')
DlangTokenType.ID ('priority')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('newPriority')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\nReturns a lazily initialized global instantiation of $(D TaskPool).\nThis function can safely be called concurrently from multiple non-worker\nthreads.  The worker threads in this pool are daemon threads, meaning that it\nis not necessary to call $(D TaskPool.stop) or $(D TaskPool.finish) before\nterminating the main thread.\n*/')
WHITE_SPACE ('\n')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('taskPool')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('concurrency')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('initOnce')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.__gshared ('__gshared')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('initOnce')
DlangTokenType.! ('!')
DlangTokenType.ID ('pool')
DlangTokenType.( ('(')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('p')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.ID ('defaultPoolThreads')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('p')
DlangTokenType.. ('.')
DlangTokenType.ID ('isDaemon')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('p')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
WHITE_SPACE (' ')
DlangTokenType.ID ('_defaultPoolThreads')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.shared ('shared')
WHITE_SPACE (' ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('atomicStore')
DlangTokenType.( ('(')
DlangTokenType.ID ('_defaultPoolThreads')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('totalCPUs')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\nThese properties get and set the number of worker threads in the $(D TaskPool)\ninstance returned by $(D taskPool).  The default value is $(D totalCPUs) - 1.\nCalling the setter after the first call to $(D taskPool) does not changes\nnumber of worker threads in the instance returned by $(D taskPool).\n*/')
WHITE_SPACE ('\n')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
WHITE_SPACE (' ')
DlangTokenType.ID ('defaultPoolThreads')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('atomicLoad')
DlangTokenType.( ('(')
DlangTokenType.ID ('_defaultPoolThreads')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_DOC ('/// Ditto')
WHITE_SPACE ('\n')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('defaultPoolThreads')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
WHITE_SPACE (' ')
DlangTokenType.ID ('newVal')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('trusted')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('atomicStore')
DlangTokenType.( ('(')
DlangTokenType.ID ('_defaultPoolThreads')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('newVal')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_DOC ('/**\nConvenience functions that forwards to $(D taskPool.parallel).  The\npurpose of these is to make parallel foreach less verbose and more\nreadable.\n\nExample:\n---\n// Find the logarithm of every number from\n// 1 to 1_000_000 in parallel, using the\n// default TaskPool instance.\nauto logs = new double[1_000_000];\n\nforeach (i, ref elem; parallel(logs))\n{\n    elem = log(i + 1.0);\n}\n---\n\n*/')
WHITE_SPACE ('\n')
DlangTokenType.ID ('ParallelForeach')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_DOC ('/// Ditto')
WHITE_SPACE ('\n')
DlangTokenType.ID ('ParallelForeach')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// Thrown when a parallel foreach loop is broken from.')
WHITE_SPACE ('\n')
DlangTokenType.class ('class')
WHITE_SPACE (' ')
DlangTokenType.ID ('ParallelForeachError')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('Error')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.super ('super')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Cannot break from a parallel foreach loop using break, return, "')
WHITE_SPACE ('\n              ')
DlangTokenType.~ ('~')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"labeled break/continue or goto statements."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_COMMENT ('/*------Structs that implement opApply for parallel foreach.------------------*/')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.template ('template')
WHITE_SPACE (' ')
DlangTokenType.ID ('randLen')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('randLen')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('isRandomAccessRange')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('hasLength')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('submitAndExecute')
DlangTokenType.( ('(')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType., (',')
WHITE_SPACE ('\n    ')
DlangTokenType.scope ('scope')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('doIt')
WHITE_SPACE ('\n')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('nThreads')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('PTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('scopedTask')
DlangTokenType.( ('(')
DlangTokenType.ID ('doIt')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('stdc')
DlangTokenType.. ('.')
DlangTokenType.ID ('stdlib')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('malloc')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('free')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('stdc')
DlangTokenType.. ('.')
DlangTokenType.ID ('string')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('memcpy')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// The logical thing to do would be to just use alloca() here, but that')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// causes problems on Windows for reasons that I don't understand')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// (tentatively a compiler bug) and definitely doesn't work on Posix due')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// to Bug 3753.  Therefore, allocate a fixed buffer and fall back to')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// malloc() if someone's using a ridiculous amount of threads.  Also,')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// the using a byte array instead of a PTask array as the fixed buffer')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// is to prevent d'tors from being called on uninitialized excess PTask')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// instances.')
WHITE_SPACE ('\n    ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('nBuf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('64')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.byte ('byte')
DlangTokenType.[ ('[')
DlangTokenType.ID ('nBuf')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('PTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('sizeof')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('PTask')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('nThreads')
WHITE_SPACE (' ')
DlangTokenType.<= ('<=')
WHITE_SPACE (' ')
DlangTokenType.ID ('nBuf')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('tasks')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('PTask')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.. ('.')
DlangTokenType.ID ('ptr')
DlangTokenType.) (')')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('nThreads')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('ptr')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.ID ('PTask')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('malloc')
DlangTokenType.( ('(')
DlangTokenType.ID ('nThreads')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('PTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('sizeof')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('ptr')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('OutOfMemoryError')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Out of memory in std.parallelism."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('tasks')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('ptr')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('nThreads')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('nThreads')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.ID ('nBuf')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('free')
DlangTokenType.( ('(')
DlangTokenType.ID ('tasks')
DlangTokenType.. ('.')
DlangTokenType.ID ('ptr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('t')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('core')
DlangTokenType.. ('.')
DlangTokenType.ID ('stdc')
DlangTokenType.. ('.')
DlangTokenType.ID ('string')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('memcpy')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.LINE_COMMENT ('// This silly looking code is necessary to prevent d'tors from being')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// called on uninitialized objects.')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('temp')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedTask')
DlangTokenType.( ('(')
DlangTokenType.ID ('doIt')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('memcpy')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('t')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('temp')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('PTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('sizeof')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.LINE_COMMENT ('// This has to be done to t after copying, not temp before copying.')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// Otherwise, temp's destructor will sit here and wait for the')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// task to finish.')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('t')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType... ('..')
DlangTokenType.ID ('tasks')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('prev')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('tasks')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('queueLock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('queueUnlock')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('abstractPutGroupNoSync')
DlangTokenType.( ('(')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType., (',')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.$ ('$')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
WHITE_SPACE ('\n        ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('tasks')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.try ('try')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('job')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.catch ('catch')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('exception')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('taskStatus')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskStatus')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.LINE_COMMENT ('// Try to execute each of these in the current thread')
WHITE_SPACE ('\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType... ('..')
DlangTokenType.$ ('$')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('pool')
DlangTokenType.. ('.')
DlangTokenType.ID ('tryDeleteExecute')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('basePtr')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('firstException')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('lastException')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('tasks')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.try ('try')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('task')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.catch ('catch')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('addToChain')
DlangTokenType.( ('(')
DlangTokenType.ID ('e')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('firstException')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('lastException')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.continue ('continue')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('firstException')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.ID ('firstException')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('foreachErr')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('ParallelForeachError')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('doSizeZeroCase')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Delegate')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('ParallelForeach')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('p')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('Delegate')
WHITE_SPACE (' ')
DlangTokenType.ID ('dg')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.with ('with')
DlangTokenType.( ('(')
DlangTokenType.ID ('p')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('res')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.LINE_COMMENT ('// The explicit ElementType!R in the foreach loops is necessary for')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// correct behavior when iterating over strings.')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasLvalueElements')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('ElementType')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Parameters')
DlangTokenType.! ('!')
DlangTokenType.ID ('dg')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('res')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('dg')
DlangTokenType.( ('(')
DlangTokenType.ID ('index')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('res')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('dg')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('res')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('foreachErr')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('index')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('ElementType')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('Parameters')
DlangTokenType.! ('!')
DlangTokenType.ID ('dg')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('res')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('dg')
DlangTokenType.( ('(')
DlangTokenType.ID ('index')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('res')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('dg')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('res')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('foreachErr')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('index')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('res')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('string')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallelApplyMixinRandomAccess')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.TOKEN_STRING ('q{\n    // Handle empty thread pool as special case.\n    if (pool.size == 0)\n    {\n        return doSizeZeroCase(this, dg);\n    }\n\n    // Whether iteration is with or without an index variable.\n    enum withIndex = Parameters!(typeof(dg)).length == 2;\n\n    shared size_t workUnitIndex = size_t.max;  // Effectively -1:  chunkIndex + 1 == 0\n    immutable len = range.length;\n    if (!len) return 0;\n\n    shared bool shouldContinue = true;\n\n    void doIt()\n    {\n        scope(failure)\n        {\n            // If an exception is thrown, all threads should bail.\n            atomicStore(shouldContinue, false);\n        }\n\n        while (atomicLoad(shouldContinue))\n        {\n            immutable myUnitIndex = atomicOp!"+="(workUnitIndex, 1);\n            immutable start = workUnitSize * myUnitIndex;\n            if (start >= len)\n            {\n                atomicStore(shouldContinue, false);\n                break;\n            }\n\n            immutable end = min(len, start + workUnitSize);\n\n            foreach (i; start..end)\n            {\n                static if (withIndex)\n                {\n                    if (dg(i, range[i])) foreachErr();\n                }\n                else\n                {\n                    if (dg(range[i])) foreachErr();\n                }\n            }\n        }\n    }\n\n    submitAndExecute(pool, &doIt);\n\n    return 0;\n}')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.ID ('string')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallelApplyMixinInputRange')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.TOKEN_STRING ('q{\n    // Handle empty thread pool as special case.\n    if (pool.size == 0)\n    {\n        return doSizeZeroCase(this, dg);\n    }\n\n    // Whether iteration is with or without an index variable.\n    enum withIndex = Parameters!(typeof(dg)).length == 2;\n\n    // This protects the range while copying it.\n    auto rangeMutex = new Mutex();\n\n    shared bool shouldContinue = true;\n\n    // The total number of elements that have been popped off range.\n    // This is updated only while protected by rangeMutex;\n    size_t nPopped = 0;\n\n    static if (\n        is(typeof(range.buf1)) &&\n        is(typeof(range.bufPos)) &&\n        is(typeof(range.doBufSwap()))\n    )\n    {\n        // Make sure we don't have the buffer recycling overload of\n        // asyncBuf.\n        static if (\n            is(typeof(range.source)) &&\n            isRoundRobin!(typeof(range.source))\n        )\n        {\n            static assert(0, "Cannot execute a parallel foreach loop on " ~\n            "the buffer recycling overload of asyncBuf.");\n        }\n\n        enum bool bufferTrick = true;\n    }\n    else\n    {\n        enum bool bufferTrick = false;\n    }\n\n    void doIt()\n    {\n        scope(failure)\n        {\n            // If an exception is thrown, all threads should bail.\n            atomicStore(shouldContinue, false);\n        }\n\n        static if (hasLvalueElements!R)\n        {\n            alias Temp = ElementType!R*[];\n            Temp temp;\n\n            // Returns:  The previous value of nPopped.\n            size_t makeTemp()\n            {\n                import std.algorithm.internal : addressOf;\n\n                if (temp is null)\n                {\n                    temp = uninitializedArray!Temp(workUnitSize);\n                }\n\n                rangeMutex.lock();\n                scope(exit) rangeMutex.unlock();\n\n                size_t i = 0;\n                for (; i < workUnitSize && !range.empty; range.popFront(), i++)\n                {\n                    temp[i] = addressOf(range.front);\n                }\n\n                temp = temp[0..i];\n                auto ret = nPopped;\n                nPopped += temp.length;\n                return ret;\n            }\n\n        }\n        else\n        {\n\n            alias Temp = ElementType!R[];\n            Temp temp;\n\n            // Returns:  The previous value of nPopped.\n            static if (!bufferTrick) size_t makeTemp()\n            {\n                if (temp is null)\n                {\n                    temp = uninitializedArray!Temp(workUnitSize);\n                }\n\n                rangeMutex.lock();\n                scope(exit) rangeMutex.unlock();\n\n                size_t i = 0;\n                for (; i < workUnitSize && !range.empty; range.popFront(), i++)\n                {\n                    temp[i] = range.front;\n                }\n\n                temp = temp[0..i];\n                auto ret = nPopped;\n                nPopped += temp.length;\n                return ret;\n            }\n\n            static if (bufferTrick) size_t makeTemp()\n            {\n                rangeMutex.lock();\n                scope(exit) rangeMutex.unlock();\n\n                // Elide copying by just swapping buffers.\n                temp.length = range.buf1.length;\n                swap(range.buf1, temp);\n\n                // This is necessary in case popFront() has been called on\n                // range before entering the parallel foreach loop.\n                temp = temp[range.bufPos..$];\n\n                static if (is(typeof(range._length)))\n                {\n                    range._length -= (temp.length - range.bufPos);\n                }\n\n                range.doBufSwap();\n                auto ret = nPopped;\n                nPopped += temp.length;\n                return ret;\n            }\n        }\n\n        while (atomicLoad(shouldContinue))\n        {\n            auto overallIndex = makeTemp();\n            if (temp.empty)\n            {\n                atomicStore(shouldContinue, false);\n                break;\n            }\n\n            foreach (i; 0..temp.length)\n            {\n                scope(success) overallIndex++;\n\n                static if (hasLvalueElements!R)\n                {\n                    static if (withIndex)\n                    {\n                        if (dg(overallIndex, *temp[i])) foreachErr();\n                    }\n                    else\n                    {\n                        if (dg(*temp[i])) foreachErr();\n                    }\n                }\n                else\n                {\n                    static if (withIndex)\n                    {\n                        if (dg(overallIndex, temp[i])) foreachErr();\n                    }\n                    else\n                    {\n                        if (dg(temp[i])) foreachErr();\n                    }\n                }\n            }\n        }\n    }\n\n    submitAndExecute(pool, &doIt);\n\n    return 0;\n}')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// Calls e.next until the end of the chain is found.')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('findLastException')
DlangTokenType.( ('(')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.pure ('pure')
WHITE_SPACE (' ')
DlangTokenType.nothrow ('nothrow')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('e')
WHITE_SPACE (' ')
DlangTokenType.is ('is')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.null ('null')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.while ('while')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('e')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('e')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// Adds e to the exception chain.')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('addToChain')
DlangTokenType.( ('(')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType., (',')
WHITE_SPACE ('\n    ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('firstException')
DlangTokenType., (',')
WHITE_SPACE ('\n    ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('Throwable')
WHITE_SPACE (' ')
DlangTokenType.ID ('lastException')
WHITE_SPACE ('\n')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.pure ('pure')
WHITE_SPACE (' ')
DlangTokenType.nothrow ('nothrow')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('firstException')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('lastException')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('lastException')
DlangTokenType.. ('.')
DlangTokenType.ID ('next')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('lastException')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('findLastException')
DlangTokenType.( ('(')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('firstException')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('e')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('lastException')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('findLastException')
DlangTokenType.( ('(')
DlangTokenType.ID ('e')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.struct ('struct')
WHITE_SPACE (' ')
DlangTokenType.ID ('ParallelForeach')
DlangTokenType.( ('(')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('R')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('workUnitSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('ElementType')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('hasLvalueElements')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('NoIndexDg')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('IndexDg')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('NoIndexDg')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.ID ('E')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('IndexDg')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.delegate ('delegate')
DlangTokenType.( ('(')
DlangTokenType.ID ('size_t')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('E')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('opApply')
DlangTokenType.( ('(')
DlangTokenType.scope ('scope')
WHITE_SPACE (' ')
DlangTokenType.ID ('NoIndexDg')
WHITE_SPACE (' ')
DlangTokenType.ID ('dg')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('randLen')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.mixin ('mixin')
DlangTokenType.( ('(')
DlangTokenType.ID ('parallelApplyMixinRandomAccess')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.mixin ('mixin')
DlangTokenType.( ('(')
DlangTokenType.ID ('parallelApplyMixinInputRange')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('opApply')
DlangTokenType.( ('(')
DlangTokenType.scope ('scope')
WHITE_SPACE (' ')
DlangTokenType.ID ('IndexDg')
WHITE_SPACE (' ')
DlangTokenType.ID ('dg')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('randLen')
DlangTokenType.! ('!')
DlangTokenType.ID ('R')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.mixin ('mixin')
DlangTokenType.( ('(')
DlangTokenType.ID ('parallelApplyMixinRandomAccess')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.else ('else')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.mixin ('mixin')
DlangTokenType.( ('(')
DlangTokenType.ID ('parallelApplyMixinInputRange')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.BLOCK_COMMENT ('/*\nThis struct buffers the output of a callable that outputs data into a\nuser-supplied buffer into a set of buffers of some fixed size.  It allows these\nbuffers to be accessed with an input range interface.  This is used internally\nin the buffer-recycling overload of TaskPool.asyncBuf, which creates an\ninstance and forwards it to the input range overload of asyncBuf.\n*/')
WHITE_SPACE ('\n')
DlangTokenType.private ('private')
WHITE_SPACE (' ')
DlangTokenType.struct ('struct')
WHITE_SPACE (' ')
DlangTokenType.ID ('RoundRobinBuffer')
DlangTokenType.( ('(')
DlangTokenType.ID ('C1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('C2')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// No need for constraints because they're already checked for in asyncBuf.')
WHITE_SPACE ('\n\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('Array')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Parameters')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('C1')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType.) (')')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.alias ('alias')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('Array')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('T')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufs')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('index')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('C1')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextDel')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('C2')
WHITE_SPACE (' ')
DlangTokenType.ID ('emptyDel')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('_empty')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('primed')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('C1')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextDel')
DlangTokenType., (',')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('C2')
WHITE_SPACE (' ')
DlangTokenType.ID ('emptyDel')
DlangTokenType., (',')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('initialBufSize')
DlangTokenType., (',')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('nBuffers')
WHITE_SPACE ('\n    ')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('nextDel')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('nextDel')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('emptyDel')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('emptyDel')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('bufs')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('nBuffers')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufs')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('buf')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('initialBufSize')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('prime')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.in ('in')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('empty')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.do ('do')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('success')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('primed')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('nextDel')
DlangTokenType.( ('(')
DlangTokenType.ID ('bufs')
DlangTokenType.[ ('[')
DlangTokenType.ID ('index')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n\n    ')
DlangTokenType.ID ('T')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('front')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE ('\n    ')
DlangTokenType.in ('in')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('empty')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.do ('do')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('primed')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('prime')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufs')
DlangTokenType.[ ('[')
DlangTokenType.ID ('index')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('empty')
WHITE_SPACE (' ')
DlangTokenType.|| ('||')
WHITE_SPACE (' ')
DlangTokenType.ID ('emptyDel')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('_empty')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.true ('true')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('index')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.% ('%')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufs')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('primed')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.const ('const')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('safe')
WHITE_SPACE (' ')
DlangTokenType.pure ('pure')
WHITE_SPACE (' ')
DlangTokenType.nothrow ('nothrow')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('_empty')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.unittest ('unittest')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// This was the only way I could get nested maps to work.')
WHITE_SPACE ('\n    ')
DlangTokenType.__gshared ('__gshared')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('stdio')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// These test basic functionality but don't stress test for threading bugs.')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// These are the tests that should be run every time Phobos is compiled.')
WHITE_SPACE ('\n')
DlangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('stop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// The only way this can be verified is manually.')
WHITE_SPACE ('\n    ')
DlangTokenType.debug ('debug')
DlangTokenType.( ('(')
DlangTokenType.ID ('std_parallelism')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"totalCPUs = "')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('totalCPUs')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('oldPriority')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('priority')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('priority')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('PRIORITY_MAX')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('priority')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('PRIORITY_MAX')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('priority')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('PRIORITY_MIN')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('priority')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('PRIORITY_MIN')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('priority')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('oldPriority')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('priority')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('oldPriority')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('refFun')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
WHITE_SPACE (' ')
DlangTokenType.ID ('num')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('num')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.uint ('uint')
WHITE_SPACE (' ')
DlangTokenType.ID ('x')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test task().')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('t')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.! ('!')
DlangTokenType.ID ('refFun')
DlangTokenType.( ('(')
DlangTokenType.ID ('x')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('t')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('t')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('t')
DlangTokenType.. ('.')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('t2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('refFun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('x')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('t2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('t2')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('t2')
DlangTokenType.. ('.')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test scopedTask().')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('st')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('refFun')
DlangTokenType.( ('(')
DlangTokenType.ID ('x')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('st')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('st')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('st')
DlangTokenType.. ('.')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('st2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedTask')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('refFun')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('x')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('st2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('st2')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('st2')
DlangTokenType.. ('.')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test executeInNewThread().')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('ct')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedTask')
DlangTokenType.! ('!')
DlangTokenType.ID ('refFun')
DlangTokenType.( ('(')
DlangTokenType.ID ('x')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('ct')
DlangTokenType.. ('.')
DlangTokenType.ID ('executeInNewThread')
DlangTokenType.( ('(')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('PRIORITY_MAX')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('ct')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('ct')
DlangTokenType.. ('.')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test ref return.')
WHITE_SPACE ('\n    ')
DlangTokenType.uint ('uint')
WHITE_SPACE (' ')
DlangTokenType.ID ('toInc')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('makeRef')
DlangTokenType.( ('(')
DlangTokenType.ID ('T')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('T')
WHITE_SPACE (' ')
DlangTokenType.ID ('num')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('num')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('t3')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.! ('!')
DlangTokenType.ID ('makeRef')
DlangTokenType.( ('(')
DlangTokenType.ID ('toInc')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('t3')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('t3')
DlangTokenType.. ('.')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('t3')
DlangTokenType.. ('.')
DlangTokenType.ID ('spinForce')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('t3')
DlangTokenType.. ('.')
DlangTokenType.ID ('args')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('testSafe')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('safe')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('bump')
DlangTokenType.( ('(')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('num')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('num')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('safePool')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('t')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('bump')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('t')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('t')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('st')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedTask')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('bump')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('st')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('st')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('safePool')
DlangTokenType.. ('.')
DlangTokenType.ID ('stop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('arr')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('nums')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('nums2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('arr')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('elem')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('nums')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('nums2')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('6')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('text')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums2')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('nums')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('text')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums2')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('arr')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('nums')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('text')
DlangTokenType.( ('(')
DlangTokenType.ID ('arr')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test const/immutable arguments.')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('add')
DlangTokenType.( ('(')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('lhs')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('rhs')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('lhs')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('rhs')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('addLhs')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('addRhs')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('addTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('add')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('addLhs')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('addRhs')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('addScopedTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('scopedTask')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('add')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('addLhs')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('addRhs')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('addTask')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('addScopedTask')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('addTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('addScopedTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test parallel foreach with non-random access range.')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('range')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('filter')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a != 666"')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('range')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('nums')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('logs')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.double ('double')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1_000_000')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('logs')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('elem')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('log')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.FLOAT_LITERAL ('1.0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('logs')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('approxEqual')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.double ('double')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('log')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('9')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('16')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('25')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.long ('long')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('9')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('16')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('25')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"-a"')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE ('\n           ')
DlangTokenType.[ ('[')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('9')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.) (')')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('tupleBuf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Tuple')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.int ('int')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
DlangTokenType.) (')')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"-a"')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tupleBuf')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('tupleBuf')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('9')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.) (')')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"-a"')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tupleBuf')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('tupleBuf')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('9')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.) (')')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test amap with a non-array buffer.')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('toIndex')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('indexed')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('range')
DlangTokenType.. ('.')
DlangTokenType.ID ('indexed')
DlangTokenType.( ('(')
DlangTokenType.ID ('toIndex')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * 2"')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('indexed')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('equal')
DlangTokenType.( ('(')
DlangTokenType.ID ('indexed')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('6')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('8')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('equal')
DlangTokenType.( ('(')
DlangTokenType.ID ('toIndex')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('8')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('6')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a / 2"')
DlangTokenType.( ('(')
DlangTokenType.ID ('indexed')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('indexed')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('equal')
DlangTokenType.( ('(')
DlangTokenType.ID ('indexed')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('equal')
DlangTokenType.( ('(')
DlangTokenType.ID ('toIndex')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('9')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('16')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('25')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('9')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('16')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('25')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.FLOAT_LITERAL ('0.0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.FLOAT_LITERAL ('0.0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('min')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('max')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * b"')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE ('\n           ')
DlangTokenType.ID ('tuple')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('24')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ID ('serialAns')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('algorithm')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('serialAns')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('serialAns')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test worker-local storage.')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('wl')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('workerLocalStorage')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('wl')
DlangTokenType.. ('.')
DlangTokenType.ID ('get')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('wl')
DlangTokenType.. ('.')
DlangTokenType.ID ('get')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('wlRange')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('wl')
DlangTokenType.. ('.')
DlangTokenType.ID ('toRange')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallelSum')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.ID ('wlRange')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('parallelSum')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('499500')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('wlRange')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('wlRange')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('wlRange')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType... ('..')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.] (']')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('wlRange')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test finish()')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('slowFun')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('sleep')
DlangTokenType.( ('(')
DlangTokenType.ID ('dur')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"msecs"')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool1')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('tSlow')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.! ('!')
DlangTokenType.ID ('slowFun')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool1')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('tSlow')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool1')
DlangTokenType.. ('.')
DlangTokenType.ID ('finish')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('tSlow')
DlangTokenType.. ('.')
DlangTokenType.ID ('yieldForce')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// Can't assert that pool1.status == PoolState.stopNow because status')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// doesn't change until after the "done" flag is set and the waiting')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// thread is woken up.')
WHITE_SPACE ('\n\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('tSlow2')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.! ('!')
DlangTokenType.ID ('slowFun')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool2')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('tSlow2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool2')
DlangTokenType.. ('.')
DlangTokenType.ID ('finish')
DlangTokenType.( ('(')
DlangTokenType.true ('true')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.LINE_COMMENT ('// blocking')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('tSlow2')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.LINE_COMMENT ('// Test fix for Bug 8582 by making pool size zero.')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('pool3')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('tSlow3')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.! ('!')
DlangTokenType.ID ('slowFun')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool3')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('tSlow3')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('pool3')
DlangTokenType.. ('.')
DlangTokenType.ID ('finish')
DlangTokenType.( ('(')
DlangTokenType.true ('true')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.LINE_COMMENT ('// blocking')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('tSlow3')
DlangTokenType.. ('.')
DlangTokenType.ID ('done')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.LINE_COMMENT ('// This is correct because no thread will terminate unless pool2.status')
WHITE_SPACE ('\n        ')
DlangTokenType.LINE_COMMENT ('// and pool3.status have already been set to stopNow.')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('pool2')
DlangTokenType.. ('.')
DlangTokenType.ID ('status')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('stopNow')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('pool3')
DlangTokenType.. ('.')
DlangTokenType.ID ('status')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('PoolState')
DlangTokenType.. ('.')
DlangTokenType.ID ('stopNow')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test default pool stuff.')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('totalCPUs')
WHITE_SPACE (' ')
DlangTokenType.- ('-')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('nums')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('nums')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('equal')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('equal')
DlangTokenType.( ('(')
WHITE_SPACE ('\n               ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('30_000_001')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10_000')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE ('\n               ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('algorithm')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('30_000_001')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n           ')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// The filter is to kill random access and test the non-random access')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// branch.')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('equal')
DlangTokenType.( ('(')
WHITE_SPACE ('\n               ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                   ')
DlangTokenType.ID ('filter')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a == a"')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('30_000_001')
DlangTokenType.) (')')
WHITE_SPACE ('\n                                  ')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10_000')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE ('\n               ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('algorithm')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('30_000_001')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n           ')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0UL')
DlangTokenType., (',')
WHITE_SPACE ('\n                       ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('3_000_001')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10_000')
DlangTokenType.) (')')
WHITE_SPACE ('\n                      ')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0UL')
DlangTokenType., (',')
WHITE_SPACE ('\n                       ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('algorithm')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('3_000_001')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                      ')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('equal')
DlangTokenType.( ('(')
WHITE_SPACE ('\n               ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1_000_002')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE ('\n               ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('asyncBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('filter')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a == a"')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1_000_002')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n           ')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('file')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('deleteme')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('string')
WHITE_SPACE (' ')
DlangTokenType.ID ('temp_file')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('deleteme')
WHITE_SPACE (' ')
DlangTokenType.~ ('~')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"-tempDelMe.txt"')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('file')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('File')
DlangTokenType.( ('(')
DlangTokenType.ID ('temp_file')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"wb"')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.scope ('scope')
DlangTokenType.( ('(')
DlangTokenType.ID ('exit')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('file')
DlangTokenType.. ('.')
DlangTokenType.ID ('close')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('file')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('remove')
DlangTokenType.( ('(')
DlangTokenType.ID ('temp_file')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('written')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.[ ('[')
DlangTokenType.FLOAT_LITERAL ('1.0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.FLOAT_LITERAL ('4.0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('6')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.FLOAT_LITERAL ('7.0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('8')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('9')
DlangTokenType.] (']')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('row')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('written')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('file')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.ID ('join')
DlangTokenType.( ('(')
DlangTokenType.ID ('to')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('string')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('row')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"\t"')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.ID ('file')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('File')
DlangTokenType.( ('(')
DlangTokenType.ID ('temp_file')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('next')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.char ('char')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('buf')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('file')
DlangTokenType.. ('.')
DlangTokenType.ID ('readln')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.import ('import')
WHITE_SPACE (' ')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('string')
WHITE_SPACE (' ')
DlangTokenType.: (':')
WHITE_SPACE (' ')
DlangTokenType.ID ('chomp')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('buf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('chomp')
DlangTokenType.( ('(')
DlangTokenType.ID ('buf')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.double ('double')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('read')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('asyncReader')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('asyncBuf')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('next')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.& ('&')
DlangTokenType.ID ('file')
DlangTokenType.. ('.')
DlangTokenType.ID ('eof')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('line')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('asyncReader')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('line')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.continue ('continue')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('ls')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('line')
DlangTokenType.. ('.')
DlangTokenType.ID ('split')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"\t"')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('read')
WHITE_SPACE (' ')
DlangTokenType.~= ('~=')
WHITE_SPACE (' ')
DlangTokenType.ID ('to')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.double ('double')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('ls')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('read')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('written')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('file')
DlangTokenType.. ('.')
DlangTokenType.ID ('close')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test Map/AsyncBuf chaining.')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('abuf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('asyncBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.- ('-')
DlangTokenType.FLOAT_LITERAL ('1.0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('3_000_000')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('temp')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.ID ('sqrt')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('abuf')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('5')
WHITE_SPACE ('\n                ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('lmchain')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.ID ('temp')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('lmchain')
DlangTokenType.. ('.')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('ii')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('lmchain')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.! ('!')
DlangTokenType.ID ('approxEqual')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('ii')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.ID ('ii')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.CHARACTER_LITERAL (''\t'')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('ii')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test buffer trick in parallel foreach.')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('abuf')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('asyncBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.- ('-')
DlangTokenType.FLOAT_LITERAL ('1.0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1_000_000')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('abuf')
DlangTokenType.. ('.')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufTrickTest')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('size_t')
DlangTokenType.[ ('[')
DlangTokenType.ID ('abuf')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('abuf')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('bufTrickTest')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('equal')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1_000_000')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('bufTrickTest')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('myTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
DlangTokenType.ID ('std')
DlangTokenType.. ('.')
DlangTokenType.ID ('math')
DlangTokenType.. ('.')
DlangTokenType.ID ('abs')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('myTask')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('myTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('spinForce')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test that worker local storage from one pool receives an index of 0')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// when the index is queried w.r.t. another pool.  The only way to do this')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// is non-deterministically.')
WHITE_SPACE ('\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('workerIndex')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('workerIndex')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// Test exception handling.')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallelForeachThrow')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('""')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('assertThrown')
DlangTokenType.! ('!')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
DlangTokenType.ID ('parallelForeachThrow')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduceException')
DlangTokenType.( ('(')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('a')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('b')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('""')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('assertThrown')
DlangTokenType.! ('!')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.ID ('reduceException')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('mapException')
DlangTokenType.( ('(')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('a')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('""')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('assertThrown')
DlangTokenType.! ('!')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.ID ('mapException')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('mapThrow')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('m')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('map')
DlangTokenType.! ('!')
DlangTokenType.ID ('mapException')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('m')
DlangTokenType.. ('.')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('assertThrown')
DlangTokenType.! ('!')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
DlangTokenType.ID ('mapThrow')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.struct ('struct')
WHITE_SPACE (' ')
DlangTokenType.ID ('ThrowingRange')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.@ ('@')
DlangTokenType.ID ('property')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('front')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.throw ('throw')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('""')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.enum ('enum')
WHITE_SPACE (' ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.ID ('assertThrown')
DlangTokenType.! ('!')
DlangTokenType.ID ('Exception')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('asyncBuf')
DlangTokenType.( ('(')
DlangTokenType.ID ('ThrowingRange')
DlangTokenType.. ('.')
DlangTokenType.ID ('init')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('//version = parallelismStressTest;')
WHITE_SPACE ('\n\n')
DlangTokenType.LINE_COMMENT ('// These are more like stress tests than real unit tests.  They print out')
WHITE_SPACE ('\n')
DlangTokenType.LINE_COMMENT ('// tons of stuff and should not be run every time make unittest is run.')
WHITE_SPACE ('\n')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.ID ('parallelismStressTest')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.unittest ('unittest')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('size_t')
WHITE_SPACE (' ')
DlangTokenType.ID ('attempt')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.for ('for')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('attempt')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('attempt')
DlangTokenType.++ ('++')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolSize')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('poolInstance')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolSize')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.uint ('uint')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('numbers')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.uint ('uint')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1_000')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('numbers')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('numbers')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Make sure it works.')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.ID ('numbers')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('numbers')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Done creating nums."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('myNumbers')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('filter')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a % 7 > 0"')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('num')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('myNumbers')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('num')
WHITE_SPACE (' ')
DlangTokenType.% ('%')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('7')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
WHITE_SPACE (' ')
DlangTokenType.&& ('&&')
WHITE_SPACE (' ')
DlangTokenType.ID ('num')
WHITE_SPACE (' ')
DlangTokenType.< ('<')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Done modulus test."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.uint ('uint')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('squares')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a * a"')
DlangTokenType.( ('(')
DlangTokenType.ID ('numbers')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('squares')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('numbers')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('number')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('numbers')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('squares')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('number')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('number')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Done squares."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('sumFuture')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.! ('!')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
WHITE_SPACE (' ')
DlangTokenType.) (')')
DlangTokenType.( ('(')
DlangTokenType.ID ('numbers')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('sumFuture')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ulong ('ulong')
WHITE_SPACE (' ')
DlangTokenType.ID ('sumSquares')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('numbers')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('sumSquares')
WHITE_SPACE (' ')
DlangTokenType.+= ('+=')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.uint ('uint')
WHITE_SPACE (' ')
DlangTokenType.ID ('mySum')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('sumFuture')
DlangTokenType.. ('.')
DlangTokenType.ID ('spinForce')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('mySum')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('999')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1000')
WHITE_SPACE (' ')
DlangTokenType./ ('/')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('mySumParallel')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.ID ('numbers')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('mySum')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.ID ('mySumParallel')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Done sums."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('myTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.synchronized ('synchronized')
WHITE_SPACE (' ')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Our lives are parallel...Our lives are parallel."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('myTask')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('nestedOuter')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"abcd"')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('nestedInner')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE ('  ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('letter')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('nestedOuter')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('j')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('number')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('nestedInner')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.synchronized ('synchronized')
WHITE_SPACE (' ')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('": "')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('letter')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"  "')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('j')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.DOUBLE_QUOTED_STRING ('": "')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('number')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('stop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n        ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('attempt')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Press enter to go to next round of unittests."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('readln')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.LINE_COMMENT ('// These unittests are intended more for actual testing and not so much')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// as examples.')
WHITE_SPACE ('\n    ')
DlangTokenType.unittest ('unittest')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('attempt')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.INTEGER_LITERAL ('10')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolSize')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType.] (']')
DlangTokenType.) (')')
WHITE_SPACE ('\n        ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('poolInstance')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.ID ('TaskPool')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolSize')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Test indexing.')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Creator Raw Index:  "')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('threadIndex')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('workerIndex')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Test worker-local storage.')
WHITE_SPACE ('\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('workerLocalStorage')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('workerLocalStorage')
DlangTokenType.! ('!')
DlangTokenType.uint ('uint')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0U')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1_000_000')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('workerLocalStorage')
DlangTokenType.. ('.')
DlangTokenType.ID ('get')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.ID ('workerLocalStorage')
DlangTokenType.. ('.')
DlangTokenType.ID ('toRange')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE ('\n            ')
DlangTokenType.INTEGER_LITERAL ('1_000_000')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.+ ('+')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Make sure work is reasonably balanced among threads.  This test is')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// non-deterministic and is more of a sanity check than something that')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// has an absolute pass/fail.')
WHITE_SPACE ('\n            ')
DlangTokenType.shared ('shared')
DlangTokenType.( ('(')
DlangTokenType.uint ('uint')
DlangTokenType.) (')')
DlangTokenType.[ ('[')
DlangTokenType.void ('void')
DlangTokenType.* ('*')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('nJobsByThread')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('thread')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('pool')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('nJobsByThread')
DlangTokenType.[ ('[')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.void ('void')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('thread')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('nJobsByThread')
DlangTokenType.[ ('[')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.void ('void')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('getThis')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1_000_000')
DlangTokenType.) (')')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100')
WHITE_SPACE (' ')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('atomicOp')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"+="')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('nJobsByThread')
DlangTokenType.[ ('[')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.void ('void')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('getThis')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"\nCurrent thread is:  "')
DlangTokenType., (',')
WHITE_SPACE ('\n            ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.void ('void')
DlangTokenType.* ('*')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('Thread')
DlangTokenType.. ('.')
DlangTokenType.ID ('getThis')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Workload distribution:  "')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('k')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('v')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('nJobsByThread')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.ID ('k')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.CHARACTER_LITERAL (''\t'')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('v')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Test whether amap can be nested.')
WHITE_SPACE ('\n            ')
DlangTokenType.real ('real')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('matrix')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.real ('real')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('matrix')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('j')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('matrix')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.] (']')
DlangTokenType.. ('.')
DlangTokenType.ID ('length')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('matrix')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.[ ('[')
DlangTokenType.ID ('j')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('j')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Get around weird bugs having to do w/ sqrt being an intrinsic:')
WHITE_SPACE ('\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.real ('real')
WHITE_SPACE (' ')
DlangTokenType.ID ('mySqrt')
DlangTokenType.( ('(')
DlangTokenType.real ('real')
WHITE_SPACE (' ')
DlangTokenType.ID ('num')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('sqrt')
DlangTokenType.( ('(')
DlangTokenType.ID ('num')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.real ('real')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallelSqrt')
DlangTokenType.( ('(')
DlangTokenType.real ('real')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('nums')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.ID ('mySqrt')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.real ('real')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('sqrtMatrix')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.ID ('parallelSqrt')
DlangTokenType.( ('(')
DlangTokenType.ID ('matrix')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('row')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('sqrtMatrix')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('j')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('row')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.real ('real')
WHITE_SPACE (' ')
DlangTokenType.ID ('shouldBe')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('sqrt')
DlangTokenType.( ('(')
WHITE_SPACE (' ')
DlangTokenType.cast ('cast')
DlangTokenType.( ('(')
DlangTokenType.real ('real')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.ID ('i')
WHITE_SPACE (' ')
DlangTokenType.* ('*')
WHITE_SPACE (' ')
DlangTokenType.ID ('j')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('approxEqual')
DlangTokenType.( ('(')
DlangTokenType.ID ('shouldBe')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('sqrtMatrix')
DlangTokenType.[ ('[')
DlangTokenType.ID ('i')
DlangTokenType.] (']')
DlangTokenType.[ ('[')
DlangTokenType.ID ('j')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('shouldBe')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('saySuccess')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                    ')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Success doing matrix stuff that involves nested pool use."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('saySuccess')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('saySuccess')
DlangTokenType.. ('.')
DlangTokenType.ID ('workForce')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// A more thorough test of amap, reduce:  Find the sum of the square roots of')
WHITE_SPACE ('\n            ')
DlangTokenType.LINE_COMMENT ('// matrix.')
WHITE_SPACE ('\n\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.real ('real')
WHITE_SPACE (' ')
DlangTokenType.ID ('parallelSum')
DlangTokenType.( ('(')
DlangTokenType.real ('real')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('input')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
DlangTokenType.ID ('input')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('sumSqrt')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('reduce')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a + b"')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                               ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.ID ('parallelSum')
DlangTokenType.( ('(')
WHITE_SPACE ('\n                                   ')
DlangTokenType.ID ('sqrtMatrix')
WHITE_SPACE ('\n                               ')
DlangTokenType.) (')')
WHITE_SPACE ('\n                           ')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('approxEqual')
DlangTokenType.( ('(')
DlangTokenType.ID ('sumSqrt')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.FLOAT_LITERAL ('4.437e8')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Done sum of square roots."')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Test whether tasks work with function pointers.')
WHITE_SPACE ('\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('nanTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('isNaN')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.FLOAT_LITERAL ('1.0L')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('nanTask')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nanTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('spinForce')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.false ('false')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.if ('if')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('size')
WHITE_SPACE (' ')
DlangTokenType.> ('>')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.LINE_COMMENT ('// Test work waiting.')
WHITE_SPACE ('\n                ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('uselessFun')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType... ('..')
DlangTokenType.INTEGER_LITERAL ('1_000_000')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n                ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('uselessTasks')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.new ('new')
WHITE_SPACE (' ')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('uselessFun')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1000')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('uselessTask')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('uselessTasks')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('uselessTask')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('task')
DlangTokenType.( ('(')
DlangTokenType.& ('&')
DlangTokenType.ID ('uselessFun')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('uselessTask')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('uselessTasks')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('put')
DlangTokenType.( ('(')
DlangTokenType.ID ('uselessTask')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('uselessTask')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('uselessTasks')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('uselessTask')
DlangTokenType.. ('.')
DlangTokenType.ID ('workForce')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.LINE_COMMENT ('// Test the case of non-random access + ref returns.')
WHITE_SPACE ('\n            ')
DlangTokenType.int ('int')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('nums')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.struct ('struct')
WHITE_SPACE (' ')
DlangTokenType.ID ('RemoveRandom')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.int ('int')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('arr')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n                ')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.int ('int')
WHITE_SPACE (' ')
DlangTokenType.ID ('front')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('arr')
DlangTokenType.. ('.')
DlangTokenType.ID ('front')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.ID ('arr')
DlangTokenType.. ('.')
DlangTokenType.ID ('popFront')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n                ')
DlangTokenType.bool ('bool')
WHITE_SPACE (' ')
DlangTokenType.ID ('empty')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE ('\n                ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                    ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('arr')
DlangTokenType.. ('.')
DlangTokenType.ID ('empty')
DlangTokenType.; (';')
WHITE_SPACE ('\n                ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n            ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('refRange')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('RemoveRandom')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ref ('ref')
WHITE_SPACE (' ')
DlangTokenType.ID ('elem')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.( ('(')
DlangTokenType.ID ('refRange')
DlangTokenType.) (')')
DlangTokenType.) (')')
WHITE_SPACE ('\n            ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n                ')
DlangTokenType.ID ('elem')
DlangTokenType.++ ('++')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n            ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
DlangTokenType.INTEGER_LITERAL ('2')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('3')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('4')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('5')
DlangTokenType., (',')
DlangTokenType.INTEGER_LITERAL ('6')
DlangTokenType.] (']')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('text')
DlangTokenType.( ('(')
DlangTokenType.ID ('nums')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n            ')
DlangTokenType.ID ('stderr')
DlangTokenType.. ('.')
DlangTokenType.ID ('writeln')
DlangTokenType.( ('(')
DlangTokenType.DOUBLE_QUOTED_STRING ('"Nums:  "')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.ID ('nums')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n            ')
DlangTokenType.ID ('poolInstance')
DlangTokenType.. ('.')
DlangTokenType.ID ('stop')
DlangTokenType.( ('(')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.version ('version')
DlangTokenType.( ('(')
DlangTokenType.unittest ('unittest')
DlangTokenType.) (')')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.struct ('struct')
WHITE_SPACE (' ')
DlangTokenType.ID ('__S_12733')
WHITE_SPACE ('\n    ')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.invariant ('invariant')
DlangTokenType.( ('(')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.ID ('checksum')
WHITE_SPACE (' ')
DlangTokenType.== ('==')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1234567890')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.this ('this')
DlangTokenType.( ('(')
DlangTokenType.ulong ('ulong')
WHITE_SPACE (' ')
DlangTokenType.ID ('u')
DlangTokenType.) (')')
DlangTokenType.{ ('{')
DlangTokenType.ID ('n')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('u')
DlangTokenType.; (';')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.void ('void')
WHITE_SPACE (' ')
DlangTokenType.ID ('opAssign')
DlangTokenType.( ('(')
DlangTokenType.ID ('__S_12733')
WHITE_SPACE (' ')
DlangTokenType.ID ('s')
DlangTokenType.) (')')
DlangTokenType.{ ('{')
DlangTokenType.this ('this')
DlangTokenType.. ('.')
DlangTokenType.ID ('n')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('s')
DlangTokenType.. ('.')
DlangTokenType.ID ('n')
DlangTokenType.; (';')
DlangTokenType.} ('}')
WHITE_SPACE ('\n        ')
DlangTokenType.ulong ('ulong')
WHITE_SPACE (' ')
DlangTokenType.ID ('n')
DlangTokenType.; (';')
WHITE_SPACE ('\n        ')
DlangTokenType.ulong ('ulong')
WHITE_SPACE (' ')
DlangTokenType.ID ('checksum')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('1234567890')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('__genPair_12733')
DlangTokenType.( ('(')
DlangTokenType.ulong ('ulong')
WHITE_SPACE (' ')
DlangTokenType.ID ('n')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
WHITE_SPACE (' ')
DlangTokenType.return ('return')
WHITE_SPACE (' ')
DlangTokenType.ID ('__S_12733')
DlangTokenType.( ('(')
DlangTokenType.ID ('n')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.} ('}')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.immutable ('immutable')
WHITE_SPACE (' ')
DlangTokenType.ulong ('ulong')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('data')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.[ ('[')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2UL')
DlangTokenType.^^ ('^^')
DlangTokenType.INTEGER_LITERAL ('59')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2UL')
DlangTokenType.^^ ('^^')
DlangTokenType.INTEGER_LITERAL ('59')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('2UL')
DlangTokenType.^^ ('^^')
DlangTokenType.INTEGER_LITERAL ('59')
DlangTokenType.- ('-')
DlangTokenType.INTEGER_LITERAL ('1')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('112_272_537_195_293UL')
WHITE_SPACE (' ')
DlangTokenType.] (']')
DlangTokenType.; (';')
WHITE_SPACE ('\n\n    ')
DlangTokenType.auto ('auto')
WHITE_SPACE (' ')
DlangTokenType.ID ('result')
WHITE_SPACE (' ')
DlangTokenType.= ('=')
WHITE_SPACE (' ')
DlangTokenType.ID ('taskPool')
DlangTokenType.. ('.')
DlangTokenType.ID ('amap')
DlangTokenType.! ('!')
DlangTokenType.ID ('__genPair_12733')
DlangTokenType.( ('(')
DlangTokenType.ID ('data')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.LINE_COMMENT ('// this test was in std.range, but caused cycles.')
WHITE_SPACE ('\n    ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.__traits ('__traits')
DlangTokenType.( ('(')
DlangTokenType.ID ('compiles')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
WHITE_SPACE (' ')
DlangTokenType.foreach ('foreach')
WHITE_SPACE (' ')
DlangTokenType.( ('(')
DlangTokenType.ID ('i')
DlangTokenType.; (';')
WHITE_SPACE (' ')
DlangTokenType.ID ('iota')
DlangTokenType.( ('(')
DlangTokenType.INTEGER_LITERAL ('0')
DlangTokenType., (',')
WHITE_SPACE (' ')
DlangTokenType.INTEGER_LITERAL ('100UL')
DlangTokenType.) (')')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.) (')')
WHITE_SPACE (' ')
DlangTokenType.{ ('{')
DlangTokenType.} ('}')
WHITE_SPACE (' ')
DlangTokenType.} ('}')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')
WHITE_SPACE ('\n\n')
DlangTokenType.unittest ('unittest')
WHITE_SPACE ('\n')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n    ')
DlangTokenType.long ('long')
DlangTokenType.[ ('[')
DlangTokenType.] (']')
WHITE_SPACE (' ')
DlangTokenType.ID ('arr')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.static ('static')
WHITE_SPACE (' ')
DlangTokenType.assert ('assert')
DlangTokenType.( ('(')
DlangTokenType.is ('is')
DlangTokenType.( ('(')
DlangTokenType.typeof ('typeof')
DlangTokenType.( ('(')
DlangTokenType.{ ('{')
WHITE_SPACE ('\n        ')
DlangTokenType.ID ('arr')
DlangTokenType.. ('.')
DlangTokenType.ID ('parallel')
DlangTokenType.. ('.')
DlangTokenType.ID ('each')
DlangTokenType.! ('!')
DlangTokenType.DOUBLE_QUOTED_STRING ('"a++"')
DlangTokenType.; (';')
WHITE_SPACE ('\n    ')
DlangTokenType.} ('}')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.) (')')
DlangTokenType.; (';')
WHITE_SPACE ('\n')
DlangTokenType.} ('}')